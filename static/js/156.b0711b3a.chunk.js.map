{"version":3,"file":"static/js/156.b0711b3a.chunk.js","mappings":"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","sources":["Pages/User/EditUser.js"],"sourcesContent":["import React, { useState } from \"react\";\r\n\r\nimport { Formik, Form, Field, ErrorMessage } from \"formik\";\r\nimport Button from \"../../Component/Button/Button\";\r\nimport Select from \"react-select\";\r\nimport * as Yup from \"yup\";\r\nimport { BsFillEyeFill, BsFillEyeSlashFill } from \"react-icons/bs\";\r\nimport TextError from \"../../Component/TextError/TextError\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\n\r\nimport { updateUser } from \"../../Redux/User/thunk\";\r\nimport { errorFunction } from \"../../Component/Alert\";\r\n\r\nimport { checkRedundantDataUser } from \"../../utils/redundant/user\";\r\nimport \"./user.css\";\r\nimport { genders } from \"../../Component/Data/Data\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { AsyncPaginate } from \"react-select-async-paginate\";\r\nimport axiosInstance from \"../../utils/axios\";\r\nconst EditUser = ({ loading, currentPage }) => {\r\n  // props\r\n  const history = useHistory();\r\n  const permissions = useSelector((state) => state.auth.permissions);\r\n  const is_superuser = useSelector((state) => state.auth.is_superuser);\r\n  const user = useSelector((state) => state.user.user);\r\n  const edit = useSelector((state) => state.user.edit);\r\n  const [password, setPassword] = useState(\"password\");\r\n  const [confirmPassword, setConfirmPassword] = useState(\"password\");\r\n  const dispatch = useDispatch();\r\n\r\n  //state for disabling the submit button\r\n\r\n  const [lock, setLock] = useState(false);\r\n  //initial state of the form\r\n  const initialState = {\r\n    first_name: edit ? user?.first_name : \"\",\r\n    middle_name: edit ? user?.middle_name : \"\",\r\n    last_name: edit ? user?.last_name : \"\",\r\n    email: edit ? user?.email : \"\",\r\n    username: edit ? user?.username : \"\",\r\n    user_branch: edit ? user?.user_branch : null,\r\n    // group: edit ? user?.group : null,\r\n    password: \"\",\r\n    confirm_password: \"\",\r\n    employee_id: edit ? user?.employee_id : \"\",\r\n    gender: edit ? genders.find((gender) => gender.id === user?.gender) : \"\",\r\n    remarks: \"\",\r\n    is_active: edit ? user?.is_active : false,\r\n  };\r\n\r\n  //validation rules of the form\r\n  const validationSchema = Yup.object().shape({\r\n    first_name: Yup.string()\r\n      .min(2, \"First name must be at least 2 characters.\")\r\n      .max(50, \"First name should be 50 characters.\")\r\n      .matches(\r\n        /(?=.*^[A-Za-z]\\w).*$/,\r\n        \"First name should only contain alphabet.\"\r\n      ),\r\n    middle_name: Yup.string()\r\n      .min(2, \"Middle name must be at least 2 characters.\")\r\n      .max(50, \"Middle name should be 50 characters.\")\r\n      .matches(\r\n        /(?=.*^[A-Za-z]\\w).*$/,\r\n        \"Middle name should only contain alphabet.\"\r\n      ),\r\n\r\n    last_name: Yup.string()\r\n      .min(2, \"Last name must be at least 2 characters.\")\r\n      .max(50, \"Last name should be 50 characters.\")\r\n      .matches(\r\n        /(?=.*^[A-Za-z]\\w).*$/,\r\n        \"Last name should only contain alphabet.\"\r\n      ),\r\n    email: Yup.string().email().required(\"Email is required.\"),\r\n    user_branch: Yup.object()\r\n      .typeError(\"Branch is required\")\r\n      .required(\"Branch is required\"),\r\n    // group: Yup.object()\r\n    //   .typeError(\"Group is required\")\r\n    //   .required(\"Group is required\"),\r\n    password: Yup.string()\r\n      .required(\"Please Enter your password\")\r\n      .min(6, \"Password must be at least 6 characters.\")\r\n      .matches(\r\n        /^(?=.*[a-z])(?=.*\\d)[A-Za-z\\d@$!%*#?&]{6,}$/,\r\n        \"Must Contain 6 Characters, One alphabet and One Number \"\r\n      ),\r\n    confirm_password: Yup.string()\r\n      .required(\"Password is required.\")\r\n      .oneOf([Yup.ref(\"password\"), null], \"Passwords must match.\"),\r\n    employee_id: Yup.string(),\r\n    username: Yup.string()\r\n      .required(\"Username is required.\")\r\n      .min(4, \"Username must be at least 4 characters.\")\r\n      .max(50, \"Username should be 50 characters.\")\r\n      .matches(\r\n        /(?=.*^[A-Za-z_]\\w).*$/,\r\n        \"Username should begin with _ or alphabet.\"\r\n      ),\r\n\r\n    is_active: Yup.bool(),\r\n    gender: Yup.object().nullable(true),\r\n    remarks: Yup.string().required(\"Remarks is required\"),\r\n  });\r\n  const onSubmit = (values) => {\r\n    const {\r\n      first_name,\r\n      middle_name,\r\n      last_name,\r\n      email,\r\n      username,\r\n      employee_id,\r\n      user_branch,\r\n      is_active,\r\n      // group,\r\n      gender,\r\n      password,\r\n      confirm_password,\r\n      remarks,\r\n    } = values;\r\n\r\n    const capitalFirstName =\r\n      first_name?.charAt(0).toUpperCase() + first_name?.slice(1);\r\n    const capitalLastName =\r\n      last_name?.charAt(0).toUpperCase() + last_name?.slice(1);\r\n    const capitalMiddleName =\r\n      middle_name?.charAt(0).toUpperCase() + middle_name?.slice(1);\r\n\r\n    setLock(true);\r\n    if (edit) {\r\n      const id = user.id;\r\n      dispatch(\r\n        updateUser(\r\n          id,\r\n          {\r\n            first_name: capitalFirstName,\r\n            middle_name: capitalMiddleName,\r\n            last_name: capitalLastName,\r\n            email,\r\n            username: username?.charAt(0).toLowerCase() + username?.slice(1),\r\n            gender: gender !== \"\" ? gender.id : \"\",\r\n            employee_id,\r\n            user_branch: user_branch?.id,\r\n            // group: group?.id,\r\n            password,\r\n            confirm_password,\r\n            is_active,\r\n            remarks,\r\n          },\r\n          history,\r\n          currentPage\r\n        )\r\n      );\r\n    }\r\n  };\r\n\r\n  // function which checks whether the bank is added already or not\r\n  const handleChange = async (e) => {\r\n    if (edit && e.target.value !== user?.username) {\r\n      if (e.target.value.trim() && e.target.value !== \"\") {\r\n        const result = await checkRedundantDataUser(e);\r\n        result\r\n          ? errorFunction(\"User name with this  is already added. \") ||\r\n            setLock(true)\r\n          : setLock(false);\r\n      }\r\n    }\r\n    if (!edit && e.target.value.trim() && e.target.value !== \"\") {\r\n      const result = await checkRedundantDataUser(e);\r\n      result\r\n        ? errorFunction(\"User with this name is already added \") ||\r\n          setLock(true)\r\n        : setLock(false);\r\n    }\r\n  };\r\n  const loadOptions = async (search, loadOptions, { limit, offset }) => {\r\n    const { data } = await axiosInstance(\r\n      `/api/v1/core-app/branch?search=${search}&offset=${offset}&limit=${limit}`\r\n    );\r\n\r\n    return {\r\n      options: data.results,\r\n      hasMore: data.count > limit ? true : false,\r\n      additional: {\r\n        offset: limit,\r\n        limit: limit + 10,\r\n      },\r\n    };\r\n  };\r\n  // const loadOptionsGroups = async (search, loadOptions, { limit, offset }) => {\r\n  //   const { data } = await axiosInstance(\r\n  //     `/api/v1/group-app/group?search=${search}&offset=${offset}&limit=${limit}`\r\n  //   );\r\n\r\n  //   return {\r\n  //     options: data.results,\r\n  //     hasMore: data.count > limit ? true : false,\r\n  //     additional: {\r\n  //       offset: limit,\r\n  //       limit: limit + 10,\r\n  //     },\r\n  //   };\r\n  // };\r\n  // toggle password\r\n  const handlePasswordClick = () => {\r\n    if (password === \"password\") {\r\n      setPassword(\"text\");\r\n    } else {\r\n      setPassword(\"password\");\r\n    }\r\n  };\r\n  // toggle password\r\n  const handleConfirmClick = () => {\r\n    if (confirmPassword === \"password\") {\r\n      setConfirmPassword(\"text\");\r\n    } else {\r\n      setConfirmPassword(\"password\");\r\n    }\r\n  };\r\n  return (\r\n    <>\r\n      <div className=\"row  mt-3\">\r\n        <div className=\"col-12\">\r\n          <div className=\"registration-process \">\r\n            <Formik\r\n              enableReinitialize={true}\r\n              initialValues={initialState}\r\n              validationSchema={validationSchema}\r\n              onSubmit={onSubmit}\r\n            >\r\n              {(formik) => {\r\n                return (\r\n                  <Form autoComplete=\"off\">\r\n                    <div className=\"form-group row mb-2 justify-content-center\">\r\n                      <div className=\"col-4\">\r\n                        <label htmlFor=\"first_name\" className=\"fw-bold\">\r\n                          First Name\r\n                        </label>\r\n                        <Field\r\n                          type=\"text\"\r\n                          name=\"first_name\"\r\n                          className=\"form-control \"\r\n                          placeholder=\"First Name\"\r\n                        />\r\n                        <ErrorMessage name=\"first_name\" component={TextError} />\r\n                      </div>\r\n                      <div className=\"col-4\">\r\n                        <label htmlFor=\"middle_name\" className=\"fw-bold\">\r\n                          Middle Name\r\n                        </label>\r\n                        <Field\r\n                          type=\"text\"\r\n                          name=\"middle_name\"\r\n                          className=\"form-control \"\r\n                          placeholder=\"Middle Name\"\r\n                        />\r\n                        <ErrorMessage\r\n                          name=\"middle_name\"\r\n                          component={TextError}\r\n                        />\r\n                      </div>\r\n                      <div className=\"col-4\">\r\n                        <label htmlFor=\"last_name\" className=\"fw-bold\">\r\n                          Last Name\r\n                        </label>\r\n                        <Field\r\n                          type=\"text\"\r\n                          name=\"last_name\"\r\n                          className=\"form-control \"\r\n                          placeholder=\"Last Name\"\r\n                        />\r\n                        <ErrorMessage name=\"last_name\" component={TextError} />\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"form-group row mb-2 justify-content-center\">\r\n                      <div className=\"col-4\">\r\n                        <label htmlFor=\"username\" className=\"fw-bold\">\r\n                          User Name (Case sensitive)\r\n                          <span className=\"text-danger\">*</span>\r\n                        </label>\r\n                        <Field\r\n                          type=\"text\"\r\n                          name=\"username\"\r\n                          className=\"form-control \"\r\n                          placeholder=\"Username\"\r\n                          onChange={(e) => {\r\n                            const val = (e.target.value || \"\").replace(\r\n                              /\\s+/gi,\r\n                              \"\"\r\n                            );\r\n                            formik.setFieldValue(\"username\", val.trim());\r\n                            handleChange(e);\r\n                          }}\r\n                        />\r\n                        <ErrorMessage name=\"username\" component={TextError} />\r\n                      </div>\r\n                      <div className=\"col-4\">\r\n                        <label htmlFor=\"email\" className=\"fw-bold\">\r\n                          Email\r\n                          <strong className=\"text-danger ml-1\">*</strong>\r\n                        </label>\r\n                        <Field\r\n                          type=\"email\"\r\n                          name=\"email\"\r\n                          className=\"form-control \"\r\n                          placeholder=\"Email\"\r\n                        />\r\n                        <ErrorMessage name=\"email\" component={TextError} />\r\n                      </div>\r\n                      <div className=\"col-4 \">\r\n                        <label htmlFor=\"user_branch\" className=\"fw-bold \">\r\n                          Branch\r\n                          <strong className=\"text-danger ml-1\">*</strong>\r\n                        </label>\r\n                        <div style={{ display: \"flex\" }}>\r\n                          <div className=\"col-12\">\r\n                            <AsyncPaginate\r\n                              value={formik.values.user_branch}\r\n                              isClearable=\"true\"\r\n                              isSearchable=\"true\"\r\n                              name=\"user_branch\"\r\n                              getOptionLabel={(option) => `${option?.name} `}\r\n                              getOptionValue={(option) => `${option?.id}`}\r\n                              onChange={(selected) => {\r\n                                formik.setFieldValue(\"user_branch\", selected);\r\n                              }}\r\n                              loadOptions={loadOptions}\r\n                              additional={{\r\n                                offset: 0,\r\n                                limit: 10,\r\n                              }}\r\n                            />\r\n                          </div>\r\n                        </div>\r\n                        <div>\r\n                          <ErrorMessage\r\n                            name=\"user_branch\"\r\n                            component={TextError}\r\n                          />\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n\r\n                    {/* <div className=\"col-3 \">\r\n                        <label htmlFor=\"group\" className=\"fw-bold \">\r\n                          Group\r\n                          <strong className=\"text-danger ml-1\">*</strong>\r\n                        </label>\r\n                        <div style={{ display: \"flex\" }}>\r\n                          <div className=\"col-12\">\r\n                            <AsyncPaginate\r\n                              value={formik.values.group}\r\n                              isClearable=\"true\"\r\n                              isSearchable=\"true\"\r\n                              name=\"group\"\r\n                              getOptionLabel={(option) => `${option?.name} `}\r\n                              getOptionValue={(option) => `${option?.id}`}\r\n                              onChange={(selected) => {\r\n                                formik.setFieldValue(\"group\", selected);\r\n                              }}\r\n                              loadOptions={loadOptionsGroups}\r\n                              additional={{\r\n                                offset: 0,\r\n                                limit: 10,\r\n                              }}\r\n                            />\r\n                          </div>\r\n                        </div>\r\n                        <div>\r\n                          <ErrorMessage name=\"group\" component={TextError} />\r\n                        </div>\r\n                      </div> */}\r\n                    <div className=\"form-group row mb-2\">\r\n                      {is_superuser && (\r\n                        <>\r\n                          <div className=\"col-4 password-field\">\r\n                            <label\r\n                              htmlFor=\"password\"\r\n                              className=\"fw-bold float-start\"\r\n                            >\r\n                              Password\r\n                              <strong className=\"text-danger ml-1\">*</strong>\r\n                            </label>\r\n                            <div style={{ position: \"relative\" }}>\r\n                              <Field\r\n                                type={password}\r\n                                name=\"password\"\r\n                                className=\"form-control\"\r\n                                placeholder=\"Password\"\r\n                              />\r\n\r\n                              <span onClick={handlePasswordClick}>\r\n                                {password === \"password\" ? (\r\n                                  <BsFillEyeSlashFill />\r\n                                ) : (\r\n                                  <BsFillEyeFill />\r\n                                )}\r\n                              </span>\r\n                            </div>\r\n                            <ErrorMessage\r\n                              name=\"password\"\r\n                              component={TextError}\r\n                            />\r\n                          </div>\r\n                          <div className=\"col-4 password-field\">\r\n                            <label\r\n                              htmlFor=\"confirm_password\"\r\n                              className=\"fw-bold float-start\"\r\n                            >\r\n                              Confirm Password\r\n                              <strong className=\"text-danger ml-1\">*</strong>\r\n                            </label>\r\n                            <div style={{ position: \"relative\" }}>\r\n                              <Field\r\n                                type={confirmPassword}\r\n                                name=\"confirm_password\"\r\n                                className=\"form-control\"\r\n                                placeholder=\"Confirm Password\"\r\n                              />\r\n                              <span onClick={handleConfirmClick}>\r\n                                {confirmPassword === \"password\" ? (\r\n                                  <BsFillEyeSlashFill />\r\n                                ) : (\r\n                                  <BsFillEyeFill />\r\n                                )}\r\n                              </span>\r\n                            </div>\r\n                            <ErrorMessage\r\n                              name=\"confirm_password\"\r\n                              component={TextError}\r\n                            />\r\n                          </div>\r\n                        </>\r\n                      )}\r\n                      <div className=\"col-4\">\r\n                        <label htmlFor=\"gender\" className=\"fw-bold\">\r\n                          Gender\r\n                        </label>\r\n                        <Select\r\n                          value={formik.values.gender}\r\n                          isClearable=\"true\"\r\n                          isSearchable=\"true\"\r\n                          name=\"gender\"\r\n                          getOptionLabel={(option) => `${option?.name} `}\r\n                          getOptionValue={(option) => `${option?.id}`}\r\n                          options={genders}\r\n                          onChange={(selected) => {\r\n                            formik.setFieldValue(\"gender\", selected);\r\n                          }}\r\n                        />\r\n                        <ErrorMessage name=\"gender\" component={TextError} />\r\n                      </div>\r\n                    </div>\r\n\r\n                    <div className=\"form-group row mb-2\">\r\n                      <div className=\"col-3\">\r\n                        <label htmlFor=\"remarks\" className=\"fw-bold\">\r\n                          Remarks\r\n                          <span className=\"text-danger\">*</span>\r\n                        </label>\r\n                        <textarea\r\n                          type=\"text\"\r\n                          name=\"remarks\"\r\n                          onChange={(e) => {\r\n                            formik.setFieldValue(\r\n                              \"remarks\",\r\n                              e.target.value.trim()\r\n                            );\r\n                          }}\r\n                          className=\"form-control\"\r\n                          placeholder=\"Enter remarks\"\r\n                        />\r\n                        <ErrorMessage name=\"remarks\" component={TextError} />\r\n                      </div>\r\n                      <div className=\"col-12 text-center \">\r\n                        <Field\r\n                          type=\"checkbox\"\r\n                          name=\"is_active\"\r\n                          id=\"is_active\"\r\n                          className=\"filled-in chk-col-blue\"\r\n                        />\r\n                        <label htmlFor=\"is_active\" className=\"fw-bold  mx-2\">\r\n                          {\" \"}\r\n                          Active\r\n                        </label>\r\n                      </div>\r\n                    </div>\r\n\r\n                    <div className=\"form-group text-center\">\r\n                      <Button\r\n                        type={\"btn\"}\r\n                        className={\"btn btn-primary \"}\r\n                        loading={loading}\r\n                        disabled={lock}\r\n                        title={\"Update\"}\r\n                        content={\"Update\"}\r\n                      />\r\n                    </div>\r\n                  </Form>\r\n                );\r\n              }}\r\n            </Formik>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\nexport default React.memo(EditUser);\r\n"],"names":["EditUser","loading","currentPage","history","useHistory","is_superuser","useSelector","state","auth","permissions","user","edit","useState","password","setPassword","confirmPassword","setConfirmPassword","dispatch","useDispatch","lock","setLock","initialState","first_name","middle_name","last_name","email","username","user_branch","confirm_password","employee_id","gender","genders","id","remarks","is_active","validationSchema","Yup","shape","min","max","matches","required","typeError","oneOf","nullable","handleChange","e","target","value","trim","checkRedundantDataUser","errorFunction","loadOptions","search","limit","offset","axiosInstance","data","options","results","hasMore","count","additional","handlePasswordClick","handleConfirmClick","className","enableReinitialize","initialValues","onSubmit","values","capitalFirstName","charAt","toUpperCase","slice","capitalLastName","capitalMiddleName","updateUser","toLowerCase","formik","autoComplete","htmlFor","type","name","placeholder","component","TextError","onChange","val","replace","setFieldValue","style","display","isClearable","isSearchable","getOptionLabel","option","getOptionValue","selected","position","onClick","disabled","title","content","React"],"sourceRoot":""}