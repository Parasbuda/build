{"version":3,"file":"static/js/158.1c511cb6.chunk.js","mappings":"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","sources":["Component/Button/Button.js","Component/Data/Data.js","Component/Spinner/Spinner.js","Component/TextError/TextError.js","Component/Tooltip/Tooltip.js","Redux/User/api.js","Redux/User/action.js","Redux/User/thunk.js","utils/redundant/user.js"],"sourcesContent":["import React from \"react\";\r\nimport Spinner from \"../Spinner/Spinner\";\r\nimport Tooltip from \"../Tooltip/Tooltip\";\r\n\r\nconst Button = ({ type, className, disabled, title, loading, content, color, onClick }) => {\r\n\r\n    return (\r\n        <Tooltip content={content}>\r\n            <button onClick={onClick} type={type} className={className} disabled={disabled}>\r\n                {loading ? <Spinner color={color} /> : title}\r\n\r\n            </button>\r\n        </Tooltip>\r\n    )\r\n}\r\nexport default Button","export const options = [\r\n    { id: 1, name: \"CASH\" },\r\n    { id: 2, name: \"CREDIT\" },\r\n  ];\r\n  export const genders = [\r\n    { id: 1, name: \"Male\" },\r\n    { id: 2, name: \"Female\" },\r\n  ];\r\n  export const tax_reg_systems = [\r\n    { id: 1, name: \"VAT\" },\r\n    { id: 2, name: \"PAN\" },\r\n    { id: 3, name: \"N/A\" },\r\n  ];\r\n  export const depreciationMethods = [\r\n    { id: 1, name: \"Straight line\" },\r\n    { id: 2, name: \"Diminishing Balance \" },\r\n    { id: 3, name: \"Unit Of Product\" },\r\n  ];","import React from \"react\";\r\nimport spinner from \"../../assets/spinner.gif\";\r\nconst Spinner = ({ color }) => {\r\n  return <img src={spinner} alt=\"spinner\" color={color} height=\"30px\" className=\"ml-4\" />;\r\n};\r\n\r\nexport default Spinner;\r\n","import React from \"react\";\r\nimport \"./TextError.css\";\r\nconst TextError = (props) => {\r\n  return <div className=\"error\">{props.children}</div>;\r\n};\r\n\r\nexport default TextError;\r\n","import React from \"react\";\r\nimport Tippy from \"@tippyjs/react\";\r\nconst Tooltip = ({ content, children }) => {\r\n  return <Tippy content={content}>{children}</Tippy>;\r\n};\r\n\r\nexport default Tooltip;","import axiosInstance from \"../../utils/axios\";\r\n\r\n//obtaining the paginated data\r\nexport const getUser = (postsPerPage) =>\r\n  axiosInstance.get(\r\n    `api/v1/user-app/user?offset=0&limit=${postsPerPage}&ordering=-id`\r\n  );\r\n\r\n//obtaining all data\r\nexport const getAllUser = () =>\r\n  axiosInstance.get(`api/v1/user-app/user?ordering=-id`);\r\n\r\nexport const getCurrentUser = (decoded) =>\r\n  axiosInstance.get(`api/v1/user-app/user/${decoded.user_id}`);\r\n//obtaining the previous page data from paginated data\r\nexport const getPrevious = (previous) => axiosInstance.get(previous);\r\n\r\n//obtaining the next page data from paginated data\r\nexport const getNext = (next) => axiosInstance.get(next);\r\n\r\n//obtaining the particular page data from paginated data\r\nexport const getPageUser = (number, postsPerPage) =>\r\n  axiosInstance.get(\r\n    `api/v1/user-app/user?offset=${\r\n      (number - 1) * postsPerPage\r\n    }&limit=${postsPerPage}&ordering=-id`\r\n  );\r\n\r\n//creating function\r\nexport const createUser = (body) =>\r\n  axiosInstance.post(`api/v1/user-app/user`, body);\r\n\r\n//deleting function\r\nexport const deleteUser = (id) =>\r\n  axiosInstance.delete(`api/v1/user-app/user/${id}`);\r\n\r\n//update function\r\nexport const updateUser = (id, body) =>\r\n  axiosInstance.patch(`api/v1/user-app/update-user/${id}`, body);\r\n\r\n//searching function\r\nexport const handleSearch = (search, postsPerPage) =>\r\n  axiosInstance.get(\r\n    `api/v1/user-app/user?offset=0&limit=${postsPerPage}&search=${search}`\r\n  );\r\n\r\n// checking the redundant data\r\nexport const checkRedundantData = (e, cancelToken) =>\r\n  axiosInstance.get(`api/v1/user-app/user?username=${e.target.value.trim()}`, {\r\n    cancelToken: cancelToken.token,\r\n  });\r\n//deleting the image\r\nexport const handleDelete = (id, body) =>\r\n  axiosInstance.patch(`api/v1/user-app/user/${id}`, body);\r\n//change password\r\nexport const changePassword = (body, id) =>\r\n  axiosInstance.get(`api/v1/user-app/change_password/${id}`);\r\n","import { userConstants } from \"./constants\";\r\n// actions\r\nexport const loadingAction = () => ({\r\n  type: userConstants.LOADING_USER,\r\n});\r\nexport const loadingUpdatedAction = () => ({\r\n  type: userConstants.LOADING_UPDATED,\r\n});\r\nexport const getUserSuccessAction = (data) => ({\r\n  type: userConstants.GET_USER_SUCCESS,\r\n  payload: data,\r\n});\r\n\r\nexport const getUserFailAction = (error) => ({\r\n  type: userConstants.GET_USER_FAIL,\r\n  payload: error,\r\n});\r\n\r\nexport const getAllUserSuccessAction = (data) => ({\r\n  type: userConstants.GET_ALL_USER_SUCCESS,\r\n  payload: data,\r\n});\r\n\r\nexport const getAllUserFailAction = (error) => ({\r\n  type: userConstants.GET_ALL_USER_FAIL,\r\n  payload: error,\r\n});\r\n\r\nexport const getUserInfoSuccessAction = (data) => ({\r\n  type: userConstants.GET_USER_INFO_SUCCESS,\r\n  payload: data,\r\n});\r\n\r\nexport const getUserInfoFailAction = (error) => ({\r\n  type: userConstants.GET_USER_INFO_FAIL,\r\n  payload: error,\r\n});\r\n\r\nexport const createUserSuccessAction = (data) => ({\r\n  type: userConstants.CREATE_USER_SUCCESS,\r\n  payload: data,\r\n});\r\n\r\nexport const createUserFailAction = (error) => ({\r\n  type: userConstants.CREATE_USER_FAIL,\r\n  payload: error,\r\n});\r\n\r\nexport const deleteUserSuccessAction = (data) => ({\r\n  type: userConstants.USER_DELETED_SUCCESS,\r\n  payload: data,\r\n});\r\n\r\nexport const deleteUserFailAction = (error) => ({\r\n  type: userConstants.USER_DELETED_FAIL,\r\n  payload: error,\r\n});\r\n\r\nexport const updatedUserSuccessAction = (data) => ({\r\n  type: userConstants.UPDATE_USER_SUCCESS,\r\n  payload: data,\r\n});\r\n\r\nexport const updatedUserFailAction = (error) => ({\r\n  type: userConstants.UPDATE_USER_FAIL,\r\n  payload: error,\r\n});\r\nexport const deletePhotoSuccessAction = (data) => ({\r\n  type: userConstants.PHOTO_DELETED_SUCCESS,\r\n  payload: data,\r\n});\r\nexport const deletePhotoFailAction = (error) => ({\r\n  type: userConstants.PHOTO_DELETED_FAIL,\r\n  payload: error,\r\n});\r\n\r\n","import * as API from \"./api\";\r\nimport * as action from \"./action\";\r\nimport { errorFunction, successFunction } from \"../../Component/Alert\";\r\nimport jwt_decode from \"jwt-decode\";\r\n\r\n//get  Bank\r\nexport const getUser = (postsPerPage) => async (dispatch) => {\r\n  try {\r\n    dispatch(action.loadingAction());\r\n    const { data } = await API.getUser(postsPerPage);\r\n    const filteredData = data.results.filter(\r\n      (user) => user.is_superuser === false\r\n    );\r\n    dispatch(action.getUserSuccessAction({ ...data, results: filteredData }));\r\n  } catch (error) {\r\n    dispatch(action.getUserFailAction(error));\r\n    errorFunction(error);\r\n  }\r\n};\r\n// get all bank\r\nexport const getAllUser = () => async (dispatch) => {\r\n  try {\r\n    dispatch(action.loadingAction());\r\n    const { data } = await API.getAllUser();\r\n    const filteredData = data.results.filter(\r\n      (user) => user.is_superuser === false\r\n    );\r\n    console.log(filteredData, \"data\");\r\n    dispatch(action.getUserSuccessAction(filteredData));\r\n  } catch (error) {\r\n    dispatch(action.getAllUserFailAction(error));\r\n    errorFunction(error);\r\n  }\r\n};\r\n//get previous  page\r\nexport const getPrevious = (previous) => async (dispatch) => {\r\n  try {\r\n    dispatch(action.loadingAction());\r\n    const { data } = await API.getPrevious(previous);\r\n    const filteredData = data.results.filter(\r\n      (user) => user.is_superuser === false\r\n    );\r\n    dispatch(action.getUserSuccessAction({ ...data, results: filteredData }));\r\n  } catch (error) {\r\n    dispatch(action.getUserFailAction(error));\r\n    errorFunction(error);\r\n  }\r\n};\r\n//get next  page\r\nexport const getNext = (next) => async (dispatch) => {\r\n  try {\r\n    dispatch(action.loadingAction());\r\n    const { data } = await API.getNext(next);\r\n    const filteredData = data.results.filter(\r\n      (user) => user.is_superuser === false\r\n    );\r\n    dispatch(action.getUserSuccessAction({ ...data, results: filteredData }));\r\n  } catch (error) {\r\n    dispatch(action.getUserFailAction(error));\r\n    errorFunction(error);\r\n  }\r\n};\r\n//get particular page\r\nexport const getPageUser =\r\n  ({ number, postsPerPage }) =>\r\n  async (dispatch) => {\r\n    try {\r\n      dispatch(action.loadingAction());\r\n      const { data } = await API.getPageUser(number, postsPerPage);\r\n\r\n      dispatch(action.getUserSuccessAction(data));\r\n    } catch (error) {\r\n      dispatch(action.getUserFailAction(error));\r\n      errorFunction(error);\r\n    }\r\n  };\r\n\r\nexport const getCurrentUser = (token) => async (dispatch) => {\r\n  try {\r\n    dispatch(action.loadingAction());\r\n    const decoded = token && jwt_decode(token);\r\n    const { data } = await API.getCurrentUser(decoded);\r\n    dispatch(action.getUserInfoSuccessAction(data));\r\n  } catch (error) {\r\n    dispatch(action.getUserInfoFailAction(error));\r\n    errorFunction(error);\r\n  }\r\n};\r\nexport const createUser =\r\n  (\r\n    {\r\n      first_name,\r\n      middle_name,\r\n      last_name,\r\n      email,\r\n      username,\r\n      employee_id,\r\n      is_active,\r\n      user_branch,\r\n      // group,\r\n      gender,\r\n      password,\r\n      confirm_password,\r\n      history,\r\n    },\r\n    currentPage\r\n  ) =>\r\n  async (dispatch) => {\r\n    try {\r\n      const body = JSON.stringify({\r\n        first_name,\r\n        middle_name,\r\n        last_name,\r\n        email,\r\n        username,\r\n        employee_id,\r\n        // group,\r\n        is_active,\r\n        user_branch,\r\n        gender,\r\n        password,\r\n        confirm_password,\r\n      });\r\n      dispatch(action.loadingAction());\r\n      await API.createUser(body);\r\n      // dispatch(action.createUserSuccessAction(data));\r\n      successFunction(\"User created successfully \");\r\n      dispatch(getPageUser({ number: currentPage, postsPerPage: 10 }));\r\n      history.push(\"/user\");\r\n    } catch (error) {\r\n      dispatch(action.createUserFailAction(error));\r\n      errorFunction(\"Failed to create user.\");\r\n    }\r\n  };\r\n// Delete  bank\r\nexport const deleteUser = (id) => async (dispatch) => {\r\n  try {\r\n    dispatch(action.loadingAction());\r\n    const { data } = await API.deleteUser(id);\r\n    dispatch(action.deleteUserSuccessAction(data));\r\n    dispatch(getUser());\r\n    successFunction(\"Bank deleted Successfully\");\r\n  } catch (error) {\r\n    dispatch(action.deleteUserFailAction(error));\r\n    errorFunction(\"Failed to delete Bank \");\r\n  }\r\n};\r\n//update\r\nexport const updateUser =\r\n  (id, values, history, currentPage = undefined) =>\r\n  async (dispatch) => {\r\n    const {\r\n      first_name,\r\n      middle_name,\r\n      last_name,\r\n      email,\r\n      username,\r\n      employee_id,\r\n      user_branch,\r\n      // group,\r\n      password,\r\n      confirm_password,\r\n      gender,\r\n      is_active,\r\n      remarks,\r\n    } = values;\r\n    try {\r\n      dispatch(action.loadingUpdatedAction());\r\n\r\n      const body = JSON.stringify({\r\n        first_name,\r\n        middle_name,\r\n        last_name,\r\n        email,\r\n        username,\r\n        employee_id,\r\n        user_branch,\r\n        // group,\r\n        password,\r\n        confirm_password,\r\n        gender,\r\n        is_active,\r\n        remarks,\r\n      });\r\n      const { data } = await API.updateUser(id, body);\r\n\r\n      dispatch(getPageUser({ number: 1, postsPerPage: 10 }));\r\n      successFunction(\"User Updated Successfully \");\r\n      history.push(\"/user\");\r\n    } catch (error) {\r\n      dispatch(action.updatedUserFailAction(error));\r\n      errorFunction(\"Failed to Update User\");\r\n    }\r\n  };\r\n//handle Search\r\nexport const handleSearch = (search, postsPerPage) => async (dispatch) => {\r\n  try {\r\n    dispatch(action.loadingAction());\r\n    const { data } = await API.handleSearch(search, postsPerPage);\r\n    dispatch(action.getUserSuccessAction(data));\r\n  } catch (error) {\r\n    dispatch(action.getUserFailAction(error));\r\n    errorFunction(error);\r\n  }\r\n};\r\n//delete photo\r\nexport const deletePhoto = (id) => async (dispatch) => {\r\n  try {\r\n    const body = JSON.stringify({ photo: \"\" });\r\n    const { data } = await API.handleDelete(id, body);\r\n    dispatch(action.deletePhotoSuccessAction(data));\r\n    successFunction(data);\r\n  } catch (error) {\r\n    dispatch(action.deletePhotoFailAction(error));\r\n    errorFunction(error);\r\n  }\r\n};\r\n","import axios from \"axios\";\r\nimport { checkRedundantData } from \"../../Redux/User/api\";\r\nlet cancelToken;\r\nexport const checkRedundantDataUser = async (e) => {\r\n  //Check if there are any previous pending requests\r\n  if (typeof cancelToken !== typeof undefined) {\r\n    cancelToken.cancel(\"Operation canceled due to new request.\");\r\n  }\r\n  //Save the cancel token for the current request\r\n  cancelToken = axios.CancelToken.source();\r\n  try {\r\n    const { data } = await checkRedundantData(e, cancelToken);\r\n    if (data.length > 0) {\r\n      return true;\r\n    }\r\n    if (data.length <= 0) {\r\n      return false;\r\n    }\r\n  } catch (error) {}\r\n};"],"names":["type","className","disabled","title","loading","content","color","onClick","genders","id","name","src","spinner","alt","height","props","children","getUser","postsPerPage","axiosInstance","getPrevious","previous","getNext","next","getPageUser","number","createUser","body","updateUser","handleSearch","search","checkRedundantData","e","cancelToken","target","value","trim","token","loadingAction","userConstants","loadingUpdatedAction","getUserSuccessAction","data","payload","getUserFailAction","error","updatedUserFailAction","dispatch","action","API","filteredData","results","filter","user","is_superuser","errorFunction","currentPage","first_name","middle_name","last_name","email","username","employee_id","is_active","user_branch","gender","password","confirm_password","history","JSON","stringify","successFunction","push","values","remarks","checkRedundantDataUser","cancel","axios","length"],"sourceRoot":""}