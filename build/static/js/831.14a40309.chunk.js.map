{"version":3,"file":"static/js/831.14a40309.chunk.js","mappings":"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","sources":["Component/Button/Button.js","Component/Data/Data.js","Component/Spinner/Spinner.js","Component/TextError/TextError.js","Component/Tooltip/Tooltip.js","Pages/User/CreateUser.js","Redux/User/api.js","Redux/User/action.js","Redux/User/thunk.js","utils/redundant/user.js"],"sourcesContent":["import React from \"react\";\r\nimport Spinner from \"../Spinner/Spinner\";\r\nimport Tooltip from \"../Tooltip/Tooltip\";\r\n\r\nconst Button = ({ type, className, disabled, title, loading, content, color, onClick }) => {\r\n\r\n    return (\r\n        <Tooltip content={content}>\r\n            <button onClick={onClick} type={type} className={className} disabled={disabled}>\r\n                {loading ? <Spinner color={color} /> : title}\r\n\r\n            </button>\r\n        </Tooltip>\r\n    )\r\n}\r\nexport default Button","export const options = [\r\n    { id: 1, name: \"CASH\" },\r\n    { id: 2, name: \"CREDIT\" },\r\n  ];\r\n  export const genders = [\r\n    { id: 1, name: \"Male\" },\r\n    { id: 2, name: \"Female\" },\r\n  ];\r\n  export const tax_reg_systems = [\r\n    { id: 1, name: \"VAT\" },\r\n    { id: 2, name: \"PAN\" },\r\n    { id: 3, name: \"N/A\" },\r\n  ];\r\n  export const depreciationMethods = [\r\n    { id: 1, name: \"Straight line\" },\r\n    { id: 2, name: \"Diminishing Balance \" },\r\n    { id: 3, name: \"Unit Of Product\" },\r\n  ];","import React from \"react\";\r\nimport spinner from \"../../assets/spinner.gif\";\r\nconst Spinner = ({ color }) => {\r\n  return <img src={spinner} alt=\"spinner\" color={color} height=\"30px\" className=\"ml-4\" />;\r\n};\r\n\r\nexport default Spinner;\r\n","import React from \"react\";\r\nimport \"./TextError.css\";\r\nconst TextError = (props) => {\r\n  return <div className=\"error\">{props.children}</div>;\r\n};\r\n\r\nexport default TextError;\r\n","import React from \"react\";\r\nimport Tippy from \"@tippyjs/react\";\r\nconst Tooltip = ({ content, children }) => {\r\n  return <Tippy content={content}>{children}</Tippy>;\r\n};\r\n\r\nexport default Tooltip;","import React, { useState, useEffect } from \"react\";\r\n\r\nimport { Formik, Form, Field, ErrorMessage } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport Select from \"react-select\";\r\n\r\nimport TextError from \"../../Component/TextError/TextError\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { createUser } from \"../../Redux/User/thunk\";\r\nimport { errorFunction } from \"../../Component/Alert\";\r\nimport { checkRedundantDataUser } from \"../../utils/redundant/user\";\r\n\r\nimport { BsFillEyeFill, BsFillEyeSlashFill } from \"react-icons/bs\";\r\nimport \"./user.css\";\r\nimport { genders } from \"../../Component/Data/Data\";\r\nimport Button from \"../../Component/Button/Button\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { AsyncPaginate } from \"react-select-async-paginate\";\r\nimport axiosInstance from \"../../utils/axios\";\r\nconst CreateUser = ({ currentPage, loading }) => {\r\n  // props\r\n  const history = useHistory();\r\n  const permissions = useSelector((state) => state.auth.permissions);\r\n  const is_superuser = useSelector((state) => state.auth.is_superuser);\r\n  const user = useSelector((state) => state.user.user);\r\n  const edit = useSelector((state) => state.user.edit);\r\n  const [genderValue, setGenderValue] = useState(null);\r\n  const dispatch = useDispatch();\r\n  //state for disabling the submit button\r\n  const [password, setPassword] = useState(\"password\");\r\n  const [confirmPassword, setConfirmPassword] = useState(\"password\");\r\n  const [lock, setLock] = useState(false);\r\n  const [data, setData] = useState(null);\r\n  //initial state of the form\r\n  const initialState = {\r\n    first_name: data !== null ? data.first_name : edit ? user?.first_name : \"\",\r\n    middle_name:\r\n      data !== null ? data.middle_name : edit ? user?.middle_name : \"\",\r\n    last_name: data !== null ? data.last_name : edit ? user?.last_name : \"\",\r\n    user_branch:\r\n      data !== null ? data.user_branch : edit ? user?.user_branch : \"\",\r\n    group: data !== null ? data.group : edit ? user?.group : \"\",\r\n    email: data !== null ? data.email : edit ? user?.email : \"\",\r\n    employee_id:\r\n      data !== null ? data.employee_id : edit ? user?.employee_id : \"\",\r\n    username: data !== null ? data.username : edit ? user?.username : \"\",\r\n    gender: data !== null ? data.gender : edit ? user?.gender : \"\",\r\n    password: data !== null ? data.password : edit ? user?.password : \"\",\r\n    confirm_password:\r\n      data !== null\r\n        ? data.confirm_password\r\n        : edit\r\n        ? user?.confirm_password\r\n        : \"\",\r\n    is_active: data !== null ? data.is_active : edit ? user?.is_active : true,\r\n  };\r\n  //validation rules of the form\r\n  const validationSchema = Yup.object().shape({\r\n    first_name: Yup.string()\r\n      .min(2, \"First name must be at least 2 characters.\")\r\n      .max(50, \"First name should be 50 characters.\")\r\n      .matches(\r\n        /(?=.*^[A-Za-z]\\w).*$/,\r\n        \"First name should only contain alphabet.\"\r\n      ),\r\n    middle_name: Yup.string()\r\n      .min(2, \"Middle name must be at least 2 characters.\")\r\n      .max(50, \"Middle name should be 50 characters.\")\r\n      .matches(\r\n        /(?=.*^[A-Za-z]\\w).*$/,\r\n        \"Middle name should only contain alphabet.\"\r\n      ),\r\n\r\n    last_name: Yup.string()\r\n      .min(2, \"Last name must be at least 2 characters.\")\r\n      .max(50, \"Last name should be 50 characters.\")\r\n      .matches(\r\n        /(?=.*^[A-Za-z]\\w).*$/,\r\n        \"Last name should only contain alphabet.\"\r\n      ),\r\n    email: Yup.string().email().required(\"Email is required.\"),\r\n    username: Yup.string()\r\n      .required(\"Username is required.\")\r\n      .min(4, \"Username must be at least 4 characters.\")\r\n      .max(50, \"Username should be 50 characters.\")\r\n      .matches(\r\n        /(?=.*^[A-Za-z_]\\w).*$/,\r\n        \"Username should begin with _ or alphabet.\"\r\n      ),\r\n    password: Yup.string()\r\n      .required(\"Please Enter your password\")\r\n      .min(6, \"Password must be at least 6 characters.\")\r\n      .matches(\r\n        /^(?=.*[a-z])(?=.*\\d)[A-Za-z\\d@$!%*#?&]{6,}$/,\r\n        \"Must Contain 6 Characters, One alphabet and One Number \"\r\n      ),\r\n    confirm_password: Yup.string()\r\n      .required(\"Password is required.\")\r\n      .oneOf([Yup.ref(\"password\"), null], \"Passwords must match.\"),\r\n\r\n    user_branch: Yup.object()\r\n      .typeError(\"Branch is required\")\r\n      .required(\"Branch is required\"),\r\n    group: Yup.object()\r\n      .typeError(\"Group is required\")\r\n      .required(\"Group is required\"),\r\n    employee_id: Yup.string(),\r\n    is_active: Yup.bool(),\r\n    gender: Yup.object().nullable(true),\r\n  });\r\n\r\n  const onSubmit = (values) => {\r\n    const {\r\n      first_name,\r\n      middle_name,\r\n      last_name,\r\n      email,\r\n      username,\r\n      is_active,\r\n      employee_id,\r\n      user_branch,\r\n      gender,\r\n      group,\r\n      password,\r\n      confirm_password,\r\n    } = values;\r\n    const capitalFirstName =\r\n      first_name?.charAt(0).toUpperCase() + first_name?.slice(1);\r\n    const capitalMiddleName =\r\n      middle_name?.charAt(0).toUpperCase() + middle_name?.slice(1);\r\n    const capitalLastName =\r\n      last_name?.charAt(0).toUpperCase() + last_name?.slice(1);\r\n    const smallUserName = username?.toLowerCase();\r\n    setLock(true);\r\n    dispatch(\r\n      createUser(\r\n        {\r\n          first_name: capitalFirstName,\r\n          middle_name: capitalMiddleName,\r\n          last_name: capitalLastName,\r\n          email,\r\n          username: smallUserName,\r\n          gender,\r\n          employee_id,\r\n          user_branch: user_branch?.id,\r\n          group: group?.id,\r\n          is_active,\r\n          password,\r\n          confirm_password,\r\n          history,\r\n        },\r\n        currentPage\r\n      )\r\n    );\r\n    setLock(false);\r\n    setData(null);\r\n  };\r\n\r\n  // function which checks whether the bank is added already or not\r\n  const handleChange = async (e) => {\r\n    if (edit && e.target.value !== user?.username) {\r\n      if (e.target.value.trim() && e.target.value !== \"\") {\r\n        const result = await checkRedundantDataUser(e);\r\n        result\r\n          ? errorFunction(\"User name with this  is already added. \") ||\r\n            setLock(true)\r\n          : setLock(false);\r\n      }\r\n    }\r\n    if (e.target.value.trim() && e.target.value !== \"\") {\r\n      const result = await checkRedundantDataUser(e);\r\n      result\r\n        ? errorFunction(\"User with this name is already added \") ||\r\n          setLock(true)\r\n        : setLock(false);\r\n    }\r\n  };\r\n\r\n  // toggle password\r\n  const handlePasswordClick = () => {\r\n    if (password === \"password\") {\r\n      setPassword(\"text\");\r\n    } else {\r\n      setPassword(\"password\");\r\n    }\r\n  };\r\n  // toggle password\r\n  const handleConfirmClick = () => {\r\n    if (confirmPassword === \"password\") {\r\n      setConfirmPassword(\"text\");\r\n    } else {\r\n      setConfirmPassword(\"password\");\r\n    }\r\n  };\r\n  const loadOptions = async (search, loadOptions, { limit, offset }) => {\r\n    const { data } = await axiosInstance(\r\n      `/api/v1/core-app/branch?search=${search}&offset=${offset}&limit=${limit}`\r\n    );\r\n\r\n    return {\r\n      options: data.results,\r\n      hasMore: data.count > limit ? true : false,\r\n      additional: {\r\n        offset: limit,\r\n        limit: limit + 10,\r\n      },\r\n    };\r\n  };\r\n  const loadOptionsGroups = async (search, loadOptions, { limit, offset }) => {\r\n    const { data } = await axiosInstance(\r\n      `/api/v1/group-app/group?search=${search}&offset=${offset}&limit=${limit}`\r\n    );\r\n\r\n    return {\r\n      options: data.results,\r\n      hasMore: data.count > limit ? true : false,\r\n      additional: {\r\n        offset: limit,\r\n        limit: limit + 10,\r\n      },\r\n    };\r\n  };\r\n  return (\r\n    <>\r\n      <div className=\"row justify-content-center mt-3\">\r\n        <div className=\"col-12\">\r\n          <div className=\"registration-process \">\r\n            <Formik\r\n              enableReinitialize={true}\r\n              initialValues={initialState}\r\n              validationSchema={validationSchema}\r\n              onSubmit={onSubmit}\r\n            >\r\n              {(formik) => {\r\n                return (\r\n                  <Form autoComplete=\"off\">\r\n                    <div className=\"form-group row mb-2 justify-content-center\">\r\n                      <div className=\" col-4\">\r\n                        <label\r\n                          htmlFor=\"first_name\"\r\n                          className=\"fw-bold float-start\"\r\n                        >\r\n                          First Name\r\n                        </label>\r\n                        <Field\r\n                          type=\"text\"\r\n                          name=\"first_name\"\r\n                          className=\"form-control \"\r\n                          placeholder=\"First Name\"\r\n                        />\r\n                        <ErrorMessage name=\"first_name\" component={TextError} />\r\n                      </div>\r\n                      <div className=\" col-4\">\r\n                        <label\r\n                          htmlFor=\"middle_name\"\r\n                          className=\"fw-bold float-start\"\r\n                        >\r\n                          Middle Name\r\n                        </label>\r\n                        <Field\r\n                          type=\"text\"\r\n                          name=\"middle_name\"\r\n                          className=\"form-control \"\r\n                          placeholder=\"Middle Name\"\r\n                        />\r\n                        <ErrorMessage\r\n                          name=\"middle_name\"\r\n                          component={TextError}\r\n                        />\r\n                      </div>\r\n                      <div className=\" col-4\">\r\n                        <label\r\n                          htmlFor=\"last_name\"\r\n                          className=\"fw-bold float-start\"\r\n                        >\r\n                          Last Name\r\n                        </label>\r\n                        <Field\r\n                          type=\"text\"\r\n                          name=\"last_name\"\r\n                          className=\"form-control \"\r\n                          placeholder=\"Last Name\"\r\n                        />\r\n                        <ErrorMessage name=\"last_name\" component={TextError} />\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"form-group row mb-2 justify-content-center\">\r\n                      <div className=\"col-3\">\r\n                        <label\r\n                          htmlFor=\"username\"\r\n                          className=\"fw-bold float-start\"\r\n                        >\r\n                          User Name (Case Insensitive)\r\n                          <strong className=\"text-danger ml-1\">*</strong>\r\n                        </label>\r\n\r\n                        <Field\r\n                          type=\"text\"\r\n                          name=\"username\"\r\n                          className=\"form-control \"\r\n                          placeholder=\"Username\"\r\n                          onChange={(e) => {\r\n                            const val = (e.target.value || \"\").replace(\r\n                              /\\s+/gi,\r\n                              \"\"\r\n                            );\r\n                            formik.setFieldValue(\"username\", val.trim());\r\n                            handleChange(e);\r\n                          }}\r\n                          autoFocus\r\n                        />\r\n                        <ErrorMessage name=\"username\" component={TextError} />\r\n                      </div>\r\n                      <div className=\" col-3\">\r\n                        <label htmlFor=\"email\" className=\"fw-bold float-start\">\r\n                          Email\r\n                          <strong className=\"text-danger ml-1\">*</strong>\r\n                        </label>\r\n                        <Field\r\n                          type=\"email\"\r\n                          name=\"email\"\r\n                          className=\"form-control \"\r\n                          placeholder=\"Email\"\r\n                        />\r\n                        <ErrorMessage name=\"email\" component={TextError} />\r\n                      </div>\r\n                      <div className=\" col-3\">\r\n                        <label\r\n                          htmlFor=\"employee_id\"\r\n                          className=\"fw-bold float-start\"\r\n                        >\r\n                          Employee ID\r\n                          <strong className=\"text-danger ml-1\">*</strong>\r\n                        </label>\r\n                        <Field\r\n                          type=\"text\"\r\n                          name=\"employee_id\"\r\n                          className=\"form-control \"\r\n                          placeholder=\"Employee ID\"\r\n                        />\r\n                        <ErrorMessage\r\n                          name=\"employee_id\"\r\n                          component={TextError}\r\n                        />\r\n                      </div>\r\n                      <div className=\"col-3 \">\r\n                        <label htmlFor=\"user_branch\" className=\"fw-bold \">\r\n                          Branch\r\n                          <strong className=\"text-danger ml-1\">*</strong>\r\n                        </label>\r\n                        <div style={{ display: \"flex\" }}>\r\n                          <div className=\"col-12\">\r\n                            <AsyncPaginate\r\n                              value={formik.values.user_branch}\r\n                              isClearable=\"true\"\r\n                              isSearchable=\"true\"\r\n                              name=\"user_branch\"\r\n                              getOptionLabel={(option) => `${option?.name} `}\r\n                              getOptionValue={(option) => `${option?.id}`}\r\n                              onChange={(selected) => {\r\n                                formik.setFieldValue(\"user_branch\", selected);\r\n                              }}\r\n                              loadOptions={loadOptions}\r\n                              additional={{\r\n                                offset: 0,\r\n                                limit: 10,\r\n                              }}\r\n                            />\r\n                          </div>\r\n                        </div>\r\n                        <div>\r\n                          <ErrorMessage\r\n                            name=\"user_branch\"\r\n                            component={TextError}\r\n                          />\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"form-group row mb-2 justify-content-center\">\r\n                      {/* <div className=\"col-4\">\r\n                        <label\r\n                          htmlFor=\"birth_date\"\r\n                          className=\"fw-bold float-start\"\r\n                        >\r\n                          Birth Date\r\n                        </label>\r\n                        <div className=\"datepicker\">\r\n                          <DatePicker\r\n                            name=\"birth_date\"\r\n                            selected={formik.values.birth_date}\r\n                            showMonthDropdown\r\n                            showYearDropdown\r\n                            placeholderText=\"Birth Date\"\r\n                            dropdownMode=\"select\"\r\n                            className=\"form-control\"\r\n                            dateFormat=\"yyyy-MM-dd\"\r\n                            onChange={(date) =>\r\n                              formik.setFieldValue(\"birth_date\", date)\r\n                            }\r\n                          />\r\n                        </div>\r\n                      </div>\r\n                      <div className=\"col-4\">\r\n                        <label\r\n                          htmlFor=\"mobile_no\"\r\n                          className=\"fw-bold float-start\"\r\n                        >\r\n                          Mobile Number\r\n                        </label>\r\n                        <div className=\"input-group\">\r\n                          <div className=\"input-group-prepend\">\r\n                            <span\r\n                              className=\"form-control input-group-text\"\r\n                              id=\"basic-addon2\"\r\n                            >\r\n                              +977\r\n                            </span>\r\n                          </div>\r\n                          <Field\r\n                            type=\"number\"\r\n                            name=\"mobile_no\"\r\n                            className=\"form-control \"\r\n                            placeholder=\"Mobile Number\"\r\n                          />\r\n                        </div>\r\n                        <ErrorMessage name=\"mobile_no\" component={TextError} />\r\n                      </div> */}\r\n                      {/* <div className=\"col-4 \">\r\n                        <label htmlFor=\"user_branch\" className=\"fw-bold \">\r\n                          User Role{\" \"}\r\n                          <strong className=\"text-danger ml-1\">*</strong>\r\n                        </label>\r\n                        <div style={{ display: \"flex\" }}>\r\n                          <div className=\"col-10\">\r\n                            <AsyncPaginate\r\n                              styles={styles}\r\n                              value={formik.values.user_branch}\r\n                              isClearable=\"true\"\r\n                              isSearchable=\"true\"\r\n                              isMulti\r\n                              name=\"user_branch\"\r\n                              getOptionLabel={(option) => `${option?.name} `}\r\n                              getOptionValue={(option) => `${option?.id}`}\r\n                              onChange={(selected) => {\r\n                                formik.setFieldValue(\"user_branch\", selected);\r\n                              }}\r\n                              loadOptions={loadOptions}\r\n                              additional={{\r\n                                offset: 0,\r\n                                limit: 10,\r\n                              }}\r\n                            />\r\n                          </div>\r\n                          {(is_superuser ||\r\n                            permissions?.includes(\"add_user\")) && (\r\n                            <IconForCreatingModule\r\n                              setShowOtherModule={setShowUserRoleModal}\r\n                              setData={() => setData(formik?.values)}\r\n                              types={\"user\"}\r\n                            />\r\n                          )}\r\n                        </div>\r\n                        <div>\r\n                          <ErrorMessage name=\"user_branch\" component={TextError} />\r\n                        </div>\r\n                      </div> */}\r\n                    </div>\r\n                    <div className=\"form-group row mb-2 justify-content-center\">\r\n                      <div className=\"col-3 password-field\">\r\n                        <label\r\n                          htmlFor=\"password\"\r\n                          className=\"fw-bold float-start\"\r\n                        >\r\n                          Password\r\n                          <strong className=\"text-danger ml-1\">*</strong>\r\n                        </label>\r\n                        <div style={{ position: \"relative\" }}>\r\n                          <Field\r\n                            type={password}\r\n                            name=\"password\"\r\n                            className=\"form-control\"\r\n                            placeholder=\"Password\"\r\n                          />\r\n\r\n                          <span onClick={handlePasswordClick}>\r\n                            {password === \"password\" ? (\r\n                              <BsFillEyeSlashFill />\r\n                            ) : (\r\n                              <BsFillEyeFill />\r\n                            )}\r\n                          </span>\r\n                        </div>\r\n                        <ErrorMessage name=\"password\" component={TextError} />\r\n                      </div>\r\n                      <div className=\"col-3 password-field\">\r\n                        <label\r\n                          htmlFor=\"confirm_password\"\r\n                          className=\"fw-bold float-start\"\r\n                        >\r\n                          Confirm Password\r\n                          <strong className=\"text-danger ml-1\">*</strong>\r\n                        </label>\r\n                        <div style={{ position: \"relative\" }}>\r\n                          <Field\r\n                            type={confirmPassword}\r\n                            name=\"confirm_password\"\r\n                            className=\"form-control\"\r\n                            placeholder=\"Confirm Password\"\r\n                          />\r\n                          <span onClick={handleConfirmClick}>\r\n                            {confirmPassword === \"password\" ? (\r\n                              <BsFillEyeSlashFill />\r\n                            ) : (\r\n                              <BsFillEyeFill />\r\n                            )}\r\n                          </span>\r\n                        </div>\r\n                        <ErrorMessage\r\n                          name=\"confirm_password\"\r\n                          component={TextError}\r\n                        />\r\n                      </div>\r\n                      <div className=\"col-3 \">\r\n                        <label htmlFor=\"group\" className=\"fw-bold \">\r\n                          Group\r\n                          <strong className=\"text-danger ml-1\">*</strong>\r\n                        </label>\r\n                        <div style={{ display: \"flex\" }}>\r\n                          <div className=\"col-12\">\r\n                            <AsyncPaginate\r\n                              value={formik.values.group}\r\n                              isClearable=\"true\"\r\n                              isSearchable=\"true\"\r\n                              name=\"group\"\r\n                              getOptionLabel={(option) => `${option?.name} `}\r\n                              getOptionValue={(option) => `${option?.id}`}\r\n                              onChange={(selected) => {\r\n                                formik.setFieldValue(\"group\", selected);\r\n                              }}\r\n                              loadOptions={loadOptionsGroups}\r\n                              additional={{\r\n                                offset: 0,\r\n                                limit: 10,\r\n                              }}\r\n                            />\r\n                          </div>\r\n                        </div>\r\n                        <div>\r\n                          <ErrorMessage name=\"group\" component={TextError} />\r\n                        </div>\r\n                      </div>\r\n                      <div className=\"col-3\">\r\n                        <label htmlFor=\"gender\" className=\"fw-bold \">\r\n                          Gender\r\n                        </label>\r\n\r\n                        <Select\r\n                          value={genderValue}\r\n                          isClearable=\"true\"\r\n                          isSearchable=\"true\"\r\n                          name=\"gender\"\r\n                          getOptionLabel={(option) => `${option?.name} `}\r\n                          getOptionValue={(option) => `${option?.id}`}\r\n                          options={genders}\r\n                          onChange={(selected) => {\r\n                            formik.setFieldValue(\"gender\", selected?.id);\r\n                            setGenderValue(selected);\r\n                          }}\r\n                        />\r\n                        <ErrorMessage name=\"gender\" component={TextError} />\r\n                      </div>\r\n                    </div>\r\n                    {/* <div className=\"form-group row mb-2\">\r\n                      <div className=\" col-4 \">\r\n                        <label htmlFor=\"photo\" className=\"fw-bold float-start\">\r\n                          Photo\r\n                        </label>\r\n                        <input\r\n                          type=\"file\"\r\n                          name=\"photo\"\r\n                          className=\"form-control\"\r\n                          onChange={(event) => {\r\n                            formik.setFieldValue(\r\n                              \"photo\",\r\n                              event.target.files[0]\r\n                            );\r\n                            let reader = new FileReader();\r\n                            reader.readAsDataURL(event.target.files[0]);\r\n                            reader.onloadend = () => setImg([reader.result]);\r\n                          }}\r\n                        />\r\n\r\n                        {img && <Thumb thumb={img} />}\r\n                        {user && user.photo && !img && (\r\n                          <Thumb\r\n                            thumb={user.photo}\r\n                            handleDelete={handleDelete}\r\n                          />\r\n                        )}\r\n                        <ErrorMessage name=\"photo\" component={TextError} />\r\n                      </div>\r\n                    </div> */}\r\n                    <div className=\"form-group row mb-2\">\r\n                      <div className=\"col-12 text-center\">\r\n                        <Field\r\n                          type=\"checkbox\"\r\n                          name=\"is_active\"\r\n                          id=\"is_active\"\r\n                          className=\"filled-in chk-col-blue\"\r\n                        />\r\n                        <label htmlFor=\"is_active\" className=\"fw-bold  mx-2\">\r\n                          {\" \"}\r\n                          Active\r\n                        </label>\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"form-group text-center\">\r\n                      <Button\r\n                        type={\"btn\"}\r\n                        className={\"btn btn-primary\"}\r\n                        loading={loading}\r\n                        disabled={lock || !formik.dirty}\r\n                        title={\"Create\"}\r\n                        content={\"Add\"}\r\n                      />\r\n                    </div>\r\n                  </Form>\r\n                );\r\n              }}\r\n            </Formik>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\nexport default React.memo(CreateUser);\r\n","import axiosInstance from \"../../utils/axios\";\r\n\r\n//obtaining the paginated data\r\nexport const getUser = (postsPerPage) =>\r\n  axiosInstance.get(\r\n    `api/v1/user-app/user?offset=0&limit=${postsPerPage}&ordering=-id`\r\n  );\r\n\r\n//obtaining all data\r\nexport const getAllUser = () =>\r\n  axiosInstance.get(`api/v1/user-app/user?ordering=-id`);\r\n\r\nexport const getCurrentUser = (decoded) =>\r\n  axiosInstance.get(`api/v1/user-app/user/${decoded.user_id}`);\r\n//obtaining the previous page data from paginated data\r\nexport const getPrevious = (previous) => axiosInstance.get(previous);\r\n\r\n//obtaining the next page data from paginated data\r\nexport const getNext = (next) => axiosInstance.get(next);\r\n\r\n//obtaining the particular page data from paginated data\r\nexport const getPageUser = (number, postsPerPage) =>\r\n  axiosInstance.get(\r\n    `api/v1/user-app/user?offset=${\r\n      (number - 1) * postsPerPage\r\n    }&limit=${postsPerPage}&ordering=-id`\r\n  );\r\n\r\n//creating function\r\nexport const createUser = (body) =>\r\n  axiosInstance.post(`api/v1/user-app/user`, body);\r\n\r\n//deleting function\r\nexport const deleteUser = (id) =>\r\n  axiosInstance.delete(`api/v1/user-app/user/${id}`);\r\n\r\n//update function\r\nexport const updateUser = (id, body) =>\r\n  axiosInstance.patch(`api/v1/user-app/update-user/${id}`, body);\r\n\r\n//searching function\r\nexport const handleSearch = (search, postsPerPage) =>\r\n  axiosInstance.get(\r\n    `api/v1/user-app/user?offset=0&limit=${postsPerPage}&search=${search}`\r\n  );\r\n\r\n// checking the redundant data\r\nexport const checkRedundantData = (e, cancelToken) =>\r\n  axiosInstance.get(`api/v1/user-app/user?username=${e.target.value.trim()}`, {\r\n    cancelToken: cancelToken.token,\r\n  });\r\n//deleting the image\r\nexport const handleDelete = (id, body) =>\r\n  axiosInstance.patch(`api/v1/user-app/user/${id}`, body);\r\n//change password\r\nexport const changePassword = (body, id) =>\r\n  axiosInstance.get(`api/v1/user-app/change_password/${id}`);\r\n","import { userConstants } from \"./constants\";\r\n// actions\r\nexport const loadingAction = () => ({\r\n  type: userConstants.LOADING_USER,\r\n});\r\nexport const loadingUpdatedAction = () => ({\r\n  type: userConstants.LOADING_UPDATED,\r\n});\r\nexport const getUserSuccessAction = (data) => ({\r\n  type: userConstants.GET_USER_SUCCESS,\r\n  payload: data,\r\n});\r\n\r\nexport const getUserFailAction = (error) => ({\r\n  type: userConstants.GET_USER_FAIL,\r\n  payload: error,\r\n});\r\n\r\nexport const getAllUserSuccessAction = (data) => ({\r\n  type: userConstants.GET_ALL_USER_SUCCESS,\r\n  payload: data,\r\n});\r\n\r\nexport const getAllUserFailAction = (error) => ({\r\n  type: userConstants.GET_ALL_USER_FAIL,\r\n  payload: error,\r\n});\r\n\r\nexport const getUserInfoSuccessAction = (data) => ({\r\n  type: userConstants.GET_USER_INFO_SUCCESS,\r\n  payload: data,\r\n});\r\n\r\nexport const getUserInfoFailAction = (error) => ({\r\n  type: userConstants.GET_USER_INFO_FAIL,\r\n  payload: error,\r\n});\r\n\r\nexport const createUserSuccessAction = (data) => ({\r\n  type: userConstants.CREATE_USER_SUCCESS,\r\n  payload: data,\r\n});\r\n\r\nexport const createUserFailAction = (error) => ({\r\n  type: userConstants.CREATE_USER_FAIL,\r\n  payload: error,\r\n});\r\n\r\nexport const deleteUserSuccessAction = (data) => ({\r\n  type: userConstants.USER_DELETED_SUCCESS,\r\n  payload: data,\r\n});\r\n\r\nexport const deleteUserFailAction = (error) => ({\r\n  type: userConstants.USER_DELETED_FAIL,\r\n  payload: error,\r\n});\r\n\r\nexport const updatedUserSuccessAction = (data) => ({\r\n  type: userConstants.UPDATE_USER_SUCCESS,\r\n  payload: data,\r\n});\r\n\r\nexport const updatedUserFailAction = (error) => ({\r\n  type: userConstants.UPDATE_USER_FAIL,\r\n  payload: error,\r\n});\r\nexport const deletePhotoSuccessAction = (data) => ({\r\n  type: userConstants.PHOTO_DELETED_SUCCESS,\r\n  payload: data,\r\n});\r\nexport const deletePhotoFailAction = (error) => ({\r\n  type: userConstants.PHOTO_DELETED_FAIL,\r\n  payload: error,\r\n});\r\n\r\n","import * as API from \"./api\";\r\nimport * as action from \"./action\";\r\nimport { errorFunction, successFunction } from \"../../Component/Alert\";\r\nimport jwt_decode from \"jwt-decode\";\r\n\r\n//get  Bank\r\nexport const getUser = (postsPerPage) => async (dispatch) => {\r\n  try {\r\n    dispatch(action.loadingAction());\r\n    const { data } = await API.getUser(postsPerPage);\r\n    const filteredData = data.results.filter(\r\n      (user) => user.is_superuser === false\r\n    );\r\n    dispatch(action.getUserSuccessAction({ ...data, results: filteredData }));\r\n  } catch (error) {\r\n    dispatch(action.getUserFailAction(error));\r\n    errorFunction(error);\r\n  }\r\n};\r\n// get all bank\r\nexport const getAllUser = () => async (dispatch) => {\r\n  try {\r\n    dispatch(action.loadingAction());\r\n    const { data } = await API.getAllUser();\r\n    const filteredData = data.results.filter(\r\n      (user) => user.is_superuser === false\r\n    );\r\n    console.log(filteredData, \"data\");\r\n    dispatch(action.getUserSuccessAction(filteredData));\r\n  } catch (error) {\r\n    dispatch(action.getAllUserFailAction(error));\r\n    errorFunction(error);\r\n  }\r\n};\r\n//get previous  page\r\nexport const getPrevious = (previous) => async (dispatch) => {\r\n  try {\r\n    dispatch(action.loadingAction());\r\n    const { data } = await API.getPrevious(previous);\r\n    const filteredData = data.results.filter(\r\n      (user) => user.is_superuser === false\r\n    );\r\n    dispatch(action.getUserSuccessAction({ ...data, results: filteredData }));\r\n  } catch (error) {\r\n    dispatch(action.getUserFailAction(error));\r\n    errorFunction(error);\r\n  }\r\n};\r\n//get next  page\r\nexport const getNext = (next) => async (dispatch) => {\r\n  try {\r\n    dispatch(action.loadingAction());\r\n    const { data } = await API.getNext(next);\r\n    const filteredData = data.results.filter(\r\n      (user) => user.is_superuser === false\r\n    );\r\n    dispatch(action.getUserSuccessAction({ ...data, results: filteredData }));\r\n  } catch (error) {\r\n    dispatch(action.getUserFailAction(error));\r\n    errorFunction(error);\r\n  }\r\n};\r\n//get particular page\r\nexport const getPageUser =\r\n  ({ number, postsPerPage }) =>\r\n  async (dispatch) => {\r\n    try {\r\n      dispatch(action.loadingAction());\r\n      const { data } = await API.getPageUser(number, postsPerPage);\r\n\r\n      dispatch(action.getUserSuccessAction(data));\r\n    } catch (error) {\r\n      dispatch(action.getUserFailAction(error));\r\n      errorFunction(error);\r\n    }\r\n  };\r\n\r\nexport const getCurrentUser = (token) => async (dispatch) => {\r\n  try {\r\n    dispatch(action.loadingAction());\r\n    const decoded = token && jwt_decode(token);\r\n    const { data } = await API.getCurrentUser(decoded);\r\n    dispatch(action.getUserInfoSuccessAction(data));\r\n  } catch (error) {\r\n    dispatch(action.getUserInfoFailAction(error));\r\n    errorFunction(error);\r\n  }\r\n};\r\nexport const createUser =\r\n  (\r\n    {\r\n      first_name,\r\n      middle_name,\r\n      last_name,\r\n      email,\r\n      username,\r\n      employee_id,\r\n      is_active,\r\n      user_branch,\r\n      group,\r\n      gender,\r\n      password,\r\n      confirm_password,\r\n      history,\r\n    },\r\n    currentPage\r\n  ) =>\r\n  async (dispatch) => {\r\n    try {\r\n      const body = JSON.stringify({\r\n        first_name,\r\n        middle_name,\r\n        last_name,\r\n        email,\r\n        username,\r\n        employee_id,\r\n        group,\r\n        is_active,\r\n        user_branch,\r\n        gender,\r\n        password,\r\n        confirm_password,\r\n      });\r\n      dispatch(action.loadingAction());\r\n      await API.createUser(body);\r\n      // dispatch(action.createUserSuccessAction(data));\r\n      successFunction(\"User created successfully \");\r\n      dispatch(getPageUser({ number: currentPage, postsPerPage: 10 }));\r\n      history.push(\"/user\");\r\n    } catch (error) {\r\n      dispatch(action.createUserFailAction(error));\r\n      errorFunction(\"Failed to create user.\");\r\n    }\r\n  };\r\n// Delete  bank\r\nexport const deleteUser = (id) => async (dispatch) => {\r\n  try {\r\n    dispatch(action.loadingAction());\r\n    const { data } = await API.deleteUser(id);\r\n    dispatch(action.deleteUserSuccessAction(data));\r\n    dispatch(getUser());\r\n    successFunction(\"Bank deleted Successfully\");\r\n  } catch (error) {\r\n    dispatch(action.deleteUserFailAction(error));\r\n    errorFunction(\"Failed to delete Bank \");\r\n  }\r\n};\r\n//update\r\nexport const updateUser =\r\n  (id, values, history, currentPage = undefined) =>\r\n  async (dispatch) => {\r\n    const {\r\n      first_name,\r\n      middle_name,\r\n      last_name,\r\n      email,\r\n      username,\r\n      employee_id,\r\n      user_branch,\r\n      group,\r\n      gender,\r\n      is_active,\r\n      remarks,\r\n    } = values;\r\n    try {\r\n      dispatch(action.loadingUpdatedAction());\r\n\r\n      const body = JSON.stringify({\r\n        first_name,\r\n        middle_name,\r\n        last_name,\r\n        email,\r\n        username,\r\n        employee_id,\r\n        user_branch,\r\n        group,\r\n        gender,\r\n        is_active,\r\n        remarks,\r\n      });\r\n      const { data } = await API.updateUser(id, body);\r\n\r\n      dispatch(getPageUser({ number: 1, postsPerPage: 10 }));\r\n      successFunction(\"User Updated Successfully \");\r\n      history.push(\"/user\");\r\n    } catch (error) {\r\n      dispatch(action.updatedUserFailAction(error));\r\n      errorFunction(\"Failed to Update User\");\r\n    }\r\n  };\r\n//handle Search\r\nexport const handleSearch = (search, postsPerPage) => async (dispatch) => {\r\n  try {\r\n    dispatch(action.loadingAction());\r\n    const { data } = await API.handleSearch(search, postsPerPage);\r\n    dispatch(action.getUserSuccessAction(data));\r\n  } catch (error) {\r\n    dispatch(action.getUserFailAction(error));\r\n    errorFunction(error);\r\n  }\r\n};\r\n//delete photo\r\nexport const deletePhoto = (id) => async (dispatch) => {\r\n  try {\r\n    const body = JSON.stringify({ photo: \"\" });\r\n    const { data } = await API.handleDelete(id, body);\r\n    dispatch(action.deletePhotoSuccessAction(data));\r\n    successFunction(data);\r\n  } catch (error) {\r\n    dispatch(action.deletePhotoFailAction(error));\r\n    errorFunction(error);\r\n  }\r\n};\r\n","import axios from \"axios\";\r\nimport { checkRedundantData } from \"../../Redux/User/api\";\r\nlet cancelToken;\r\nexport const checkRedundantDataUser = async (e) => {\r\n  //Check if there are any previous pending requests\r\n  if (typeof cancelToken !== typeof undefined) {\r\n    cancelToken.cancel(\"Operation canceled due to new request.\");\r\n  }\r\n  //Save the cancel token for the current request\r\n  cancelToken = axios.CancelToken.source();\r\n  try {\r\n    const { data } = await checkRedundantData(e, cancelToken);\r\n    if (data.length > 0) {\r\n      return true;\r\n    }\r\n    if (data.length <= 0) {\r\n      return false;\r\n    }\r\n  } catch (error) {}\r\n};"],"names":["type","className","disabled","title","loading","content","color","onClick","genders","id","name","src","spinner","alt","height","props","children","CreateUser","currentPage","history","useHistory","user","useSelector","state","auth","permissions","is_superuser","edit","useState","genderValue","setGenderValue","dispatch","useDispatch","password","setPassword","confirmPassword","setConfirmPassword","lock","setLock","data","setData","initialState","first_name","middle_name","last_name","user_branch","group","email","employee_id","username","gender","confirm_password","is_active","validationSchema","Yup","shape","min","max","matches","required","oneOf","typeError","nullable","handleChange","e","target","value","trim","checkRedundantDataUser","errorFunction","handlePasswordClick","handleConfirmClick","loadOptions","search","limit","offset","axiosInstance","options","results","hasMore","count","additional","loadOptionsGroups","enableReinitialize","initialValues","onSubmit","values","capitalFirstName","charAt","toUpperCase","slice","capitalMiddleName","capitalLastName","smallUserName","toLowerCase","createUser","formik","autoComplete","htmlFor","placeholder","component","TextError","onChange","val","replace","setFieldValue","autoFocus","style","display","isClearable","isSearchable","getOptionLabel","option","getOptionValue","selected","position","Button","dirty","React","getUser","postsPerPage","getPrevious","previous","getNext","next","getPageUser","number","body","updateUser","handleSearch","checkRedundantData","cancelToken","token","loadingAction","userConstants","loadingUpdatedAction","getUserSuccessAction","payload","getUserFailAction","error","updatedUserFailAction","action","API","filteredData","filter","JSON","stringify","successFunction","push","remarks","cancel","axios","length"],"sourceRoot":""}