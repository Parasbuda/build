{"version":3,"file":"static/js/187.1ab5deab.chunk.js","mappings":"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","sources":["Component/NoData/index.js","Component/Pagination/DisplayEntries.js","Component/Pagination/index.js","Component/PaginationBlock/index.js","Component/Pagination/PaginationLimit.js","Component/Skeleton/ListingSkeleton.js","Component/Tooltip/Tooltip.js","Pages/Print/PrintModal.js","Pages/Print/Print.js","Pages/Print/index.js","Redux/Print/api.js","Redux/Print/actions.js","Redux/Print/thunk.js","utils/defaultLimit.js"],"sourcesContent":["import React from \"react\";\r\nimport { FaPlus } from \"react-icons/fa\";\r\nimport Tooltip from \"../Tooltip/Tooltip\";\r\n\r\nconst index = ({ search, onClick, addPermission }) => {\r\n  return (\r\n    <div className=\"text-center justify-content-center no-data\">\r\n      <h4 className=\"fw-normal mb-3\">No data to Display</h4>\r\n      {!search && addPermission && (\r\n        <h6>\r\n          Please{\" \"}\r\n          <Tooltip content=\"Add\">\r\n            <button\r\n              onClick={onClick}\r\n              className=\"btn btn-primary waves-effect waves-light btn-sm mx-2 p-1 nodata-btn\"\r\n            >\r\n              <FaPlus className=\"nodata-icon\" />\r\n              &nbsp;Add\r\n            </button>\r\n          </Tooltip>{\" \"}\r\n          some...\r\n        </h6>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default index;\r\n","import React from \"react\";\r\n\r\nconst DisplayEntries = ({ offset, limit, count }) => {\r\n  return(\r\n    <React.Fragment>\r\n      <p>\r\n        Showing {offset} to{\" \"}\r\n        {limit > count ? count : limit === 0 ? count : limit} of {count} entries\r\n      </p>  \r\n    </React.Fragment> \r\n  );\r\n};\r\n\r\nexport default React.memo(DisplayEntries);","import React from \"react\";\r\nconst Pagination = ({\r\n  postsPerPage,\r\n  totalPosts,\r\n  paginate,\r\n  handleClick,\r\n  currentPage,\r\n  maxPageNumberLimit,\r\n  minPageNumberLimit,\r\n}) => {\r\n  const pageNumbers = [];\r\n  if (postsPerPage > 0) {\r\n    for (let i = 1; i <= Math.ceil(totalPosts / postsPerPage); i++) {\r\n      pageNumbers.push(i);\r\n    }\r\n  }\r\n  let pageIncrementBtn = null;\r\n  if (pageNumbers.length > maxPageNumberLimit) {\r\n    pageIncrementBtn = (\r\n      <button className=\"page-link\" onClick={() => handleClick(\"next\")}>\r\n        &hellip;\r\n      </button>\r\n    );\r\n  }\r\n\r\n  let pageDecrementBtn = null;\r\n  if (minPageNumberLimit >= 1) {\r\n    pageDecrementBtn = (\r\n      <button className=\"page-link\" onClick={() => handleClick(\"previous\")}>\r\n        &hellip;\r\n      </button>\r\n    );\r\n  }\r\n  return (\r\n    <>\r\n      <ul className=\"pagination pagination-sm justify-content-end\">\r\n        <li className=\"page-item \">\r\n          <button\r\n            className=\"page-link\"\r\n            onClick={() => handleClick(\"previous\")}\r\n            disabled={currentPage === pageNumbers[0] ? true : false}\r\n          >\r\n            &laquo;\r\n          </button>\r\n        </li>\r\n        {/* {pageDecrementBtn} */}\r\n        {pageNumbers.map((number, i) => {\r\n          if (number < maxPageNumberLimit + 1 && number > minPageNumberLimit) {\r\n            return (\r\n              <li className=\"page-item\" key={number}>\r\n                <button\r\n                  onClick={() => paginate(number)}\r\n                  className={`page-link ${\r\n                    i + 1 === currentPage ? \"active\" : null\r\n                  }`}\r\n                >\r\n                  {number}\r\n                </button>\r\n              </li>\r\n            );\r\n          } else {\r\n            return null;\r\n          }\r\n        })}\r\n        {/* {pageIncrementBtn} */}\r\n        <li className=\"page-item\">\r\n          <button\r\n            className=\"page-link\"\r\n            onClick={() => handleClick(\"next\")}\r\n            disabled={\r\n              currentPage === pageNumbers[pageNumbers.length - 1] ? true : false\r\n            }\r\n          >\r\n            &raquo;\r\n          </button>\r\n        </li>\r\n      </ul>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default React.memo(Pagination);\r\n","import React from \"react\";\r\nimport DisplayEntries from \"../Pagination/DisplayEntries\";\r\nimport Pagination from \"../Pagination\";\r\nconst index = ({\r\n  currentPage,\r\n  postsPerPage,\r\n  count,\r\n  paginate,\r\n  handleClick,\r\n  setCurrentPage,\r\n  minPageNumberLimit,\r\n  maxPageNumberLimit,\r\n}) => {\r\n  return (\r\n    <>\r\n      <div className=\"row\">\r\n        <div className=\"col-6\">\r\n          <DisplayEntries\r\n            offset={1 + (currentPage - 1) * postsPerPage}\r\n            limit={postsPerPage * currentPage}\r\n            count={count}\r\n          />\r\n        </div>\r\n        {postsPerPage < count && (\r\n          <div className=\"col-6 text-right\">\r\n            <Pagination\r\n              postsPerPage={postsPerPage}\r\n              totalPosts={count}\r\n              paginate={paginate}\r\n              handleClick={handleClick}\r\n              currentPage={currentPage}\r\n              setCurrentPage={setCurrentPage}\r\n              minPageNumberLimit={minPageNumberLimit}\r\n              maxPageNumberLimit={maxPageNumberLimit}\r\n            />\r\n          </div>\r\n        )}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default index;\r\n","import React from \"react\";\r\n\r\nconst PaginationLimit = ({ postsPerPage, setPostsPerPage }) => {\r\n  const handleChange = (e) => {\r\n    const data = Number(e.target.value);\r\n    setPostsPerPage(data);\r\n  };\r\n  return (\r\n    <>\r\n      <p className=\"fw-normal p-0 m-0\">\r\n        Show\r\n        <span className=\"ml-1 mr-1\">\r\n          {\" \"}\r\n          <select value={postsPerPage} onChange={handleChange}>\r\n            <option value=\"10\">10</option>\r\n            <option value=\"20\">20</option>\r\n            <option value=\"40\">40</option>\r\n            <option value=\"99999999\">All</option>\r\n          </select>\r\n        </span>{\" \"}\r\n        entries\r\n      </p>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default React.memo(PaginationLimit);","import React from \"react\";\r\nimport Skeleton from \"react-loading-skeleton\";\r\nconst ListingSkeleton = () => {\r\n  return (\r\n    <>\r\n      <div className=\"row \">\r\n        <div className=\"col-6 d-flex \">\r\n          <Skeleton width={200} height={25} />\r\n        </div>\r\n        <div className=\"col-6 d-flex justify-content-end\">\r\n          <Skeleton width={80} height={30} />\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"mt-2\">\r\n        <Skeleton height={40} />\r\n        <Skeleton count={10} height={25} />\r\n      </div>\r\n      <div className=\"row d-flex mt-2\">\r\n        <div className=\"col-6\">\r\n          <Skeleton width={220} height={20} />\r\n        </div>\r\n        <div className=\"col-6 d-flex justify-content-end\">\r\n          <Skeleton width={200} height={30} />\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ListingSkeleton;\r\n","import React from \"react\";\r\nimport Tippy from \"@tippyjs/react\";\r\nconst Tooltip = ({ content, children }) => {\r\n  return <Tippy content={content}>{children}</Tippy>;\r\n};\r\n\r\nexport default Tooltip;","import jsPDF from \"jspdf\";\r\nimport Card from \"../../assets/card.png\";\r\nconst PrintModal = ({ show, setShow, name, setName }) => {\r\n  let url = \"\";\r\n  const doc = new jsPDF({\r\n    orientation: \"landscape\",\r\n    unit: \"mm\",\r\n    format: [430, 270],\r\n  });\r\n  // doc.addImage(Card, 0, 0,430,270);\r\n  doc.setFont(\"Helvetica\", \"bold\");\r\n  doc.setTextColor(0, 0, 0);\r\n  doc.setFontSize(53);\r\n  doc.text(name.substring(0, 26).toUpperCase(), 30, 250);\r\n  url = doc.output(\"datauristring\");\r\n  const modalClass = show ? \"modal display-block\" : \"modal display-none\";\r\n  const handleClose = () => {\r\n    setShow(false);\r\n    setName(\"\");\r\n  };\r\n  return (\r\n    <div className={modalClass} tabIndex=\"-1\">\r\n      <div className=\"modal-dialog modal-md\">\r\n        <div className=\"modal-content content\">\r\n          <div className=\"modal-header\">\r\n            <h5 className=\"modal-title\" id=\"exampleModalLabel\">\r\n              Print Preview\r\n            </h5>\r\n            <button\r\n              type=\"button\"\r\n              className=\"btn-close\"\r\n              data-dismiss=\"modal\"\r\n              aria-label=\"Close\"\r\n              onClick={handleClose}\r\n            >\r\n              &times;\r\n            </button>\r\n          </div>\r\n          <div className=\"modal-body text-center\">\r\n            <iframe\r\n              title=\"print\"\r\n              type=\"application/pdf\"\r\n              frameBorder=\"0\"\r\n              width=\"405px\"\r\n              src={url}\r\n              height=\"305px\"\r\n            ></iframe>\r\n          </div>\r\n        </div>\r\n      </div>{\" \"}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PrintModal;\r\n","import React, { useState } from \"react\";\r\nimport { FaEdit, FaPrint } from \"react-icons/fa\";\r\n\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  getParticularPage,\r\n  getPrevious,\r\n  getNext,\r\n} from \"../../Redux/Print/thunk\";\r\nimport { printConstants } from \"../../Redux/Print/constants\";\r\nimport PaginationBlock from \"../../Component/PaginationBlock\";\r\n\r\nimport NoData from \"../../Component/NoData\";\r\nimport Tooltip from \"../../Component/Tooltip/Tooltip\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport PrintModal from \"./PrintModal\";\r\nconst Print = ({\r\n  currentPage,\r\n  postsPerPage,\r\n  setCurrentPage,\r\n  count,\r\n  maxPageNumberLimit,\r\n  setMaxPageNumberLimit,\r\n  minPageNumberLimit,\r\n  setMinPageNumberLimit,\r\n  search,\r\n}) => {\r\n  const [show, setShow] = useState(false);\r\n  const [name, setName] = useState(\"\");\r\n  const history = useHistory();\r\n  // props\r\n  const permissions = useSelector((state) => state.auth.permissions);\r\n  const is_superuser = useSelector((state) => state.auth.is_superuser);\r\n  const prints = useSelector((state) => state.print.prints);\r\n  const next = useSelector((state) => state.print.next);\r\n  const previous = useSelector((state) => state.print.previous);\r\n  const dispatch = useDispatch();\r\n\r\n  // for pagination\r\n  const [pageNumberLimit] = useState(5);\r\n\r\n  //change page\r\n  const paginate = (number) => {\r\n    dispatch(getParticularPage({ number, postsPerPage }));\r\n    setCurrentPage(number);\r\n  };\r\n\r\n  //handle Click\r\n  const handleClick = (type) => {\r\n    if (type === \"previous\") {\r\n      dispatch(getPrevious(previous));\r\n      setCurrentPage((prevState) => prevState - 1);\r\n      if ((currentPage - 1) % pageNumberLimit === 0) {\r\n        setMaxPageNumberLimit(maxPageNumberLimit - pageNumberLimit);\r\n        setMinPageNumberLimit(minPageNumberLimit - pageNumberLimit);\r\n      }\r\n    } else if (type === \"next\") {\r\n      dispatch(getNext(next));\r\n      setCurrentPage((prevState) => prevState + 1);\r\n      if (currentPage + 1 > maxPageNumberLimit) {\r\n        setMaxPageNumberLimit(maxPageNumberLimit + pageNumberLimit);\r\n        setMinPageNumberLimit(minPageNumberLimit + pageNumberLimit);\r\n      }\r\n    }\r\n  };\r\n\r\n  //pagination end\r\n\r\n  //edit function for the province\r\n  const handleEdit = (id) => {\r\n    dispatch({ type: printConstants.PRINT_EDIT_SUCCESS, payload: id });\r\n    history.push(\"/create-print\");\r\n  };\r\n\r\n  const handlePrint = (name) => {\r\n    setName(name);\r\n    setShow(true);\r\n  };\r\n  const addPermission =\r\n    permissions?.includes(\"add_print\") || is_superuser ? true : false;\r\n  return (\r\n    <>\r\n      {prints?.length > 0 ? (\r\n        <div className=\"mt-2\">\r\n          <div className=\"table-scrollable\">\r\n            <table className=\"table table-hover table-bordered text-center\">\r\n              <thead>\r\n                <tr>\r\n                  <th scope=\"col\" style={{ width: \"8%\" }}>\r\n                    S.N\r\n                  </th>\r\n                  <th scope=\"col\">Print Number</th>\r\n                  <th scope=\"col\">First Name</th>\r\n                  <th scope=\"col\">Last Name</th>\r\n                  <th scope=\"col\">Action</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {prints?.length > 0 &&\r\n                  prints.map((print, i) => {\r\n                    const { id, print_no, first_name, last_name, name } = print;\r\n                    return (\r\n                      <tr key={id}>\r\n                        <td className=\"fw-bold\" style={{ width: \"8%\" }}>\r\n                          {postsPerPage * (currentPage - 1) + (i + 1)}{\" \"}\r\n                        </td>\r\n                        <td>{print_no}</td>\r\n                        <td>{first_name === \"\" ? \"-\" : first_name}</td>\r\n                        <td>{last_name === \"\" ? \"-\" : last_name}</td>\r\n\r\n                        <td>\r\n                          <Tooltip content=\"Edit\">\r\n                            <button\r\n                              onClick={() => handleEdit(id)}\r\n                              className=\"btn btn-sm btn-edit btn-primary mx-2\"\r\n                            >\r\n                              <FaEdit />\r\n                            </button>\r\n                          </Tooltip>\r\n\r\n                          <Tooltip content=\"Print\">\r\n                            <button\r\n                              onClick={() => handlePrint(name)}\r\n                              className=\"btn btn-sm  btn-success mx-2\"\r\n                            >\r\n                              <FaPrint />\r\n                            </button>\r\n                          </Tooltip>\r\n                        </td>\r\n                      </tr>\r\n                    );\r\n                  })}\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n          {count > 0 && (\r\n            <PaginationBlock\r\n              currentPage={currentPage}\r\n              postsPerPage={postsPerPage}\r\n              count={count}\r\n              paginate={paginate}\r\n              handleClick={handleClick}\r\n              setCurrentPage={setCurrentPage}\r\n              minPageNumberLimit={minPageNumberLimit}\r\n              maxPageNumberLimit={maxPageNumberLimit}\r\n            />\r\n          )}\r\n        </div>\r\n      ) : (\r\n        <NoData\r\n          search={search}\r\n          onClick={() => history.push(\"/create-print\")}\r\n          addPermission={addPermission}\r\n        />\r\n      )}\r\n      {show && (\r\n        <PrintModal\r\n          show={show}\r\n          setShow={setShow}\r\n          name={name}\r\n          setName={setName}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Print;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { defaultLimit } from \"../../utils/defaultLimit\";\r\nimport { getPrint, handleSearch } from \"../../Redux/Print/thunk\";\r\nimport Print from \"./Print\";\r\nimport ListingSkeleton from \"../../Component/Skeleton/ListingSkeleton\";\r\nimport PaginationLimit from \"../../Component/Pagination/PaginationLimit\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { FaPlus } from \"react-icons/fa\";\r\nimport Tooltip from \"../../Component/Tooltip/Tooltip\";\r\nimport { useHistory } from \"react-router-dom\";\r\nconst PrintListing = () => {\r\n  const history = useHistory();\r\n  const permissions = useSelector((state) => state.auth.permissions);\r\n  const is_superuser = useSelector((state) => state.auth.is_superuser);\r\n  const prints = useSelector((state) => state.print.prints);\r\n  const loading = useSelector((state) => state.print.loading);\r\n  const loading_updated = useSelector((state) => state.print.loading_updated);\r\n  const count = useSelector((state) => state.print.count);\r\n  const search = useSelector((state) => state.search.search);\r\n  const dispatch = useDispatch();\r\n\r\n  // for pagination\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [maxPageNumberLimit, setMaxPageNumberLimit] = useState(5);\r\n  const [minPageNumberLimit, setMinPageNumberLimit] = useState(0);\r\n  const [postsPerPage, setPostsPerPage] = useState(10);\r\n\r\n  //pagination end\r\n  //loading all the food\r\n  useEffect(() => {\r\n    if (postsPerPage === 0) {\r\n      if (search === \"\") {\r\n        dispatch(getPrint(count));\r\n      } else {\r\n        dispatch(handleSearch(search, count));\r\n      }\r\n    } else {\r\n      if (search === \"\") {\r\n        if (postsPerPage === defaultLimit) {\r\n          dispatch(getPrint(postsPerPage));\r\n        } else {\r\n          setCurrentPage(1);\r\n          dispatch(getPrint(postsPerPage));\r\n        }\r\n      } else {\r\n        setCurrentPage(1);\r\n        setMaxPageNumberLimit(5);\r\n        setMinPageNumberLimit(0);\r\n        dispatch(handleSearch(search, postsPerPage));\r\n      }\r\n    }\r\n  }, [dispatch, postsPerPage, search]);\r\n  return (\r\n    <>\r\n      <div className=\"card\">\r\n        <div className=\"header-content\">\r\n          <h4 className=\"mb-sm-0 fw-normal\">Print</h4>\r\n        </div>\r\n        <div className=\"card-body\">\r\n          <div className=\"row m-0 p-0\">\r\n            {prints?.length > 0 && (\r\n              <>\r\n                <div className=\"col-6\">\r\n                  <PaginationLimit\r\n                    postsPerPage={postsPerPage}\r\n                    setPostsPerPage={setPostsPerPage}\r\n                  />\r\n                </div>\r\n\r\n                <div className=\"col-6 text-right\">\r\n                  <Tooltip content=\"Add\">\r\n                    <button\r\n                      className=\"btn btn-primary waves-effect waves-light btn-sm float-end\"\r\n                      onClick={() => history.push(\"/create-print\")}\r\n                    >\r\n                      <FaPlus className=\"mb-1\" />\r\n                      &nbsp;Add\r\n                    </button>\r\n                  </Tooltip>\r\n                </div>\r\n              </>\r\n            )}\r\n          </div>\r\n          {loading && <ListingSkeleton />}\r\n          {loading_updated && <ListingSkeleton />}\r\n          {!loading && !loading_updated && (\r\n            <Print\r\n              currentPage={currentPage}\r\n              setCurrentPage={setCurrentPage}\r\n              postsPerPage={postsPerPage}\r\n              setPostsPerPage={setPostsPerPage}\r\n              count={count}\r\n              maxPageNumberLimit={maxPageNumberLimit}\r\n              setMaxPageNumberLimit={setMaxPageNumberLimit}\r\n              minPageNumberLimit={minPageNumberLimit}\r\n              setMinPageNumberLimit={setMinPageNumberLimit}\r\n              search={search}\r\n            />\r\n          )}\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PrintListing;\r\n","import axiosInstance from \"../../utils/axios\";\r\n\r\n//obtaining the paginated data\r\nexport const getPrint = (postsPerPage) =>\r\n  axiosInstance.get(\r\n    `api/v1/core-app/print?offset=0&limit=${postsPerPage}&ordering=-id`\r\n  );\r\n\r\n//obtaining all data\r\nexport const getAllPrint = () =>\r\n  axiosInstance.get(`api/v1/core-app/print?ordering=-id`);\r\n\r\n//obtaining the previous page data from paginated data\r\nexport const getPrevious = (previous) => axiosInstance.get(previous);\r\n\r\n//obtaining the next page data from paginated data\r\nexport const getNext = (next) => axiosInstance.get(next);\r\n\r\n//obtaining the particular page data from paginated data\r\nexport const getParticularPage = (number, postsPerPage) =>\r\n  axiosInstance.get(\r\n    `api/v1/core-app/print?offset=${\r\n      (number - 1) * postsPerPage\r\n    }&limit=${postsPerPage}&ordering=-id`\r\n  );\r\n\r\n//creating function\r\nexport const createPrint = (body) =>\r\n  axiosInstance.post(`api/v1/core-app/print`, body);\r\n\r\n//deleting function\r\nexport const deletePrint = (id) =>\r\n  axiosInstance.delete(`api/v1/core-app/print/${id}`);\r\n\r\n//update function\r\nexport const updatePrint = (id, body) =>\r\n  axiosInstance.patch(`api/v1/core-app/print/${id}`, body);\r\n\r\n//searching function\r\nexport const handleSearch = (search, postsPerPage) =>\r\n  axiosInstance.get(\r\n    `api/v1/core-app/print?offset=0&limit=${postsPerPage}&search=${search}`\r\n  );\r\n","import { printConstants } from \"./constants\";\r\n// actions\r\nexport const loadingAction = () => ({\r\n  type: printConstants.LOADING_PRINT,\r\n});\r\nexport const loadingUpdatedAction = () => ({\r\n  type: printConstants.LOADING_UPDATED,\r\n});\r\nexport const getPrintSuccessAction = (data) => ({\r\n  type: printConstants.GET_PRINT_SUCCESS,\r\n  payload: data,\r\n});\r\nexport const getPrintFailAction = (error) => ({\r\n  type: printConstants.GET_PRINT_FAIL,\r\n  payload: error,\r\n});\r\n\r\nexport const createPrintSuccessAction = (data) => ({\r\n  type: printConstants.CREATE_PRINT_SUCCESS,\r\n  payload: data,\r\n});\r\n\r\nexport const createPrintFailAction = (error) => ({\r\n  type: printConstants.CREATE_PRINT_FAIL,\r\n  payload: error,\r\n});\r\n\r\nexport const deletePrintSuccessAction = (data) => ({\r\n  type: printConstants.PRINT_DELETED_SUCCESS,\r\n  payload: data,\r\n});\r\n\r\nexport const deletePrintFailAction = (error) => ({\r\n  type: printConstants.PRINT_DELETED_FAIL,\r\n  payload: error,\r\n});\r\n\r\nexport const updatedPrintSuccessAction = (data) => ({\r\n  type: printConstants.PRINT_UPDATE_SUCCESS,\r\n  payload: data,\r\n});\r\n\r\nexport const updatedPrintFailAction = (error) => ({\r\n  type: printConstants.PRINT_UPDATE_FAIL,\r\n  payload: error,\r\n});\r\n","import * as API from \"./api\";\r\nimport * as actions from \"./actions\";\r\nimport { errorFunction, successFunction } from \"../../Component/Alert\";\r\nimport { defaultLimit } from \"../../utils/defaultLimit\";\r\n//get  Bank\r\nexport const getPrint = (postsPerPage) => async (dispatch) => {\r\n  try {\r\n    dispatch(actions.loadingAction());\r\n    const { data } = await API.getPrint(postsPerPage);\r\n    dispatch(actions.getPrintSuccessAction(data));\r\n  } catch (error) {\r\n    dispatch(actions.getPrintFailAction(error));\r\n    errorFunction(error);\r\n  }\r\n};\r\n// get all bank\r\nexport const getAllPrint = () => async (dispatch) => {\r\n  try {\r\n    dispatch(actions.loadingAction());\r\n    const { data } = await API.getAllPrint();\r\n    dispatch(actions.getPrintSuccessAction(data));\r\n  } catch (error) {\r\n    dispatch(actions.getPrintFailAction(error));\r\n    errorFunction(error);\r\n  }\r\n};\r\n//get previous  page\r\nexport const getPrevious = (previous) => async (dispatch) => {\r\n  try {\r\n    dispatch(actions.loadingAction());\r\n    const { data } = await API.getPrevious(previous);\r\n    dispatch(actions.getPrintSuccessAction(data));\r\n  } catch (error) {\r\n    dispatch(actions.getPrintFailAction(error));\r\n    errorFunction(error);\r\n  }\r\n};\r\n//get next  page\r\nexport const getNext = (next) => async (dispatch) => {\r\n  try {\r\n    dispatch(actions.loadingAction());\r\n    const { data } = await API.getNext(next);\r\n    dispatch(actions.getPrintSuccessAction(data));\r\n  } catch (error) {\r\n    dispatch(actions.getPrintFailAction(error));\r\n    errorFunction(error);\r\n  }\r\n};\r\n//get particular page\r\nexport const getParticularPage =\r\n  ({ number, postsPerPage }) =>\r\n  async (dispatch) => {\r\n    try {\r\n      dispatch(actions.loadingAction());\r\n      const { data } = await API.getParticularPage(number, postsPerPage);\r\n      dispatch(actions.getPrintSuccessAction(data));\r\n    } catch (error) {\r\n      dispatch(actions.getPrintFailAction(error));\r\n      errorFunction(error);\r\n    }\r\n  };\r\nexport const createPrint =\r\n  ({ first_name, middle_name, last_name }, history) =>\r\n  async (dispatch) => {\r\n    try {\r\n      const body = JSON.stringify({ first_name, middle_name, last_name });\r\n      dispatch(actions.loadingAction());\r\n      const { data } = await API.createPrint(body);\r\n      dispatch(actions.createPrintSuccessAction(data));\r\n      successFunction(\"Record Added Successfully.\");\r\n      history.push(\"/print\");\r\n    } catch (error) {\r\n      dispatch(actions.createPrintFailAction(error));\r\n      errorFunction(\"Failed to create record.\");\r\n    }\r\n  };\r\n\r\n//update\r\nexport const updatePrint = (id, history, values) => async (dispatch) => {\r\n  try {\r\n    dispatch(actions.loadingUpdatedAction());\r\n    const { first_name, middle_name, last_name } = values;\r\n    const body = JSON.stringify({ first_name, middle_name, last_name });\r\n    const { data } = await API.updatePrint(id, body);\r\n    dispatch(actions.updatedPrintSuccessAction(data));\r\n    successFunction(\"Record Updated Successfully \");\r\n    history.push(\"/print\");\r\n  } catch (error) {\r\n    dispatch(actions.updatedPrintFailAction(error));\r\n    errorFunction(\"Failed to Update Record\");\r\n  }\r\n};\r\n//handle Search\r\nexport const handleSearch = (search, postsPerPage) => async (dispatch) => {\r\n  try {\r\n    dispatch(actions.loadingAction());\r\n    const { data } = await API.handleSearch(search, postsPerPage);\r\n    dispatch(actions.getPrintSuccessAction(data));\r\n  } catch (error) {\r\n    dispatch(actions.getPrintFailAction(error));\r\n    errorFunction(error);\r\n  }\r\n};\r\n","export const defaultLimit = 10;\r\n"],"names":["search","onClick","addPermission","className","content","DisplayEntries","offset","limit","count","React","Pagination","postsPerPage","totalPosts","paginate","handleClick","currentPage","maxPageNumberLimit","minPageNumberLimit","pageNumbers","i","Math","ceil","push","length","disabled","map","number","setCurrentPage","PaginationLimit","setPostsPerPage","value","onChange","e","data","Number","target","width","height","children","url","show","setShow","name","setName","doc","jsPDF","orientation","unit","format","setFont","setTextColor","setFontSize","text","substring","toUpperCase","output","modalClass","tabIndex","id","type","title","frameBorder","src","setMaxPageNumberLimit","setMinPageNumberLimit","useState","history","useHistory","permissions","useSelector","state","auth","is_superuser","prints","print","next","previous","dispatch","useDispatch","pageNumberLimit","includes","scope","style","print_no","first_name","last_name","Tooltip","printConstants","payload","handleEdit","handlePrint","PaginationBlock","getParticularPage","getPrevious","prevState","getNext","NoData","loading","loading_updated","useEffect","getPrint","handleSearch","defaultLimit","ListingSkeleton","axiosInstance","createPrint","body","updatePrint","loadingAction","getPrintSuccessAction","getPrintFailAction","error","createPrintSuccessAction","updatedPrintSuccessAction","actions","API","errorFunction","middle_name","JSON","stringify","successFunction","values"],"sourceRoot":""}