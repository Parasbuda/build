{"version":3,"file":"static/js/122.5eb4cadb.chunk.js","mappings":"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","sources":["Component/Button/Button.js","Component/Spinner/Spinner.js","Component/TextError/TextError.js","Component/Tooltip/Tooltip.js","utils/redundant/branch.js","Pages/Branch/CreateBranch.js","Redux/Branch/api.js","Redux/Branch/actions.js","Redux/Branch/thunk.js"],"sourcesContent":["import React from \"react\";\r\nimport Spinner from \"../Spinner/Spinner\";\r\nimport Tooltip from \"../Tooltip/Tooltip\";\r\n\r\nconst Button = ({ type, className, disabled, title, loading, content, color, onClick }) => {\r\n\r\n    return (\r\n        <Tooltip content={content}>\r\n            <button onClick={onClick} type={type} className={className} disabled={disabled}>\r\n                {loading ? <Spinner color={color} /> : title}\r\n\r\n            </button>\r\n        </Tooltip>\r\n    )\r\n}\r\nexport default Button","import React from \"react\";\r\nimport spinner from \"../../assets/spinner.gif\";\r\nconst Spinner = ({ color }) => {\r\n  return <img src={spinner} alt=\"spinner\" color={color} height=\"30px\" className=\"ml-4\" />;\r\n};\r\n\r\nexport default Spinner;\r\n","import React from \"react\";\r\nimport \"./TextError.css\";\r\nconst TextError = (props) => {\r\n  return <div className=\"error\">{props.children}</div>;\r\n};\r\n\r\nexport default TextError;\r\n","import React from \"react\";\r\nimport Tippy from \"@tippyjs/react\";\r\nconst Tooltip = ({ content, children }) => {\r\n  return <Tippy content={content}>{children}</Tippy>;\r\n};\r\n\r\nexport default Tooltip;","import axios from \"axios\";\r\nimport {\r\n  checkRedundantDataName,\r\n  checkRedundantDataCode,\r\n} from \"../../Redux/Branch/api\";\r\nlet cancelToken;\r\nexport const checkRedundantDataBranchName = async (e, short_name) => {\r\n  //Check if there are any previous pending requests\r\n  if (typeof cancelToken !== typeof undefined) {\r\n    cancelToken.cancel(\"Operation canceled due to new request.\");\r\n  }\r\n  //Save the cancel token for the current request\r\n  cancelToken = axios.CancelToken.source();\r\n  try {\r\n    const { data } = await checkRedundantDataName(e, cancelToken, short_name);\r\n    if (data.length > 0) {\r\n      return true;\r\n    }\r\n    if (data.length <= 0) {\r\n      return false;\r\n    }\r\n  } catch (error) {}\r\n};\r\n\r\nexport const checkRedundantDataBranchCode = async (e, name) => {\r\n  //Check if there are any previous pending requests\r\n  if (typeof cancelToken !== typeof undefined) {\r\n    cancelToken.cancel(\"Operation canceled due to new request.\");\r\n  }\r\n  //Save the cancel token for the current request\r\n  cancelToken = axios.CancelToken.source();\r\n  try {\r\n    const { data } = await checkRedundantDataCode(e, cancelToken, name);\r\n    if (data.length > 0) {\r\n      return true;\r\n    }\r\n    if (data.length <= 0) {\r\n      return false;\r\n    }\r\n  } catch (error) {}\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { Formik, Form, Field, ErrorMessage } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport TextError from \"../../Component/TextError/TextError\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { errorFunction } from \"../../Component/Alert\";\r\nimport PropTypes from \"prop-types\";\r\nimport { createBranch, updateBranch } from \"../../Redux/Branch/thunk\";\r\nimport Button from \"../../Component/Button/Button\";\r\nimport {\r\n  checkRedundantDataBranchName,\r\n  checkRedundantDataBranchCode,\r\n} from \"../../utils/redundant/branch\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst CreateBranch = ({ currentPage }) => {\r\n  // props\r\n  const history = useHistory();\r\n  const branch = useSelector((state) => state.branch.branch);\r\n  const loading = useSelector((state) => state.branch.loading);\r\n  const edit = useSelector((state) => state.branch.edit);\r\n  const dispatch = useDispatch();\r\n  //state for disabling the submit button\r\n  const [lock, setLock] = useState(false);\r\n  //initial state of the form\r\n  const initialState = {\r\n    name: edit ? branch?.name : \"\",\r\n    code: edit ? branch?.code : \"\",\r\n    is_active: edit ? (branch?.is_active ? true : true) : true,\r\n    remarks: \"\",\r\n  };\r\n\r\n  //validation rules of the form\r\n  const validationSchema = Yup.object().shape({\r\n    name: Yup.string()\r\n      .required(\"Name is required.\")\r\n      .min(1, \"Name must be at least 1 characters.\")\r\n      .max(50, \"Name must be at least 50 characters.\"),\r\n    code: Yup.string()\r\n      .required(\"Short name is required.\")\r\n      .min(1, \"Short name must be at least 1 characters.\")\r\n      .max(5, \"Short name must be at least 50 characters.\"),\r\n    remarks:\r\n      edit &&\r\n      Yup.string()\r\n        .required(\"Remarks is required.\")\r\n        .min(1, \"Remarks Name must be at least 1 characters.\"),\r\n    is_active: Yup.bool(),\r\n  });\r\n  const onSubmit = (values) => {\r\n    const { name, code } = values;\r\n    const capitalName = name?.charAt(0).toUpperCase() + name?.slice(1);\r\n    const capitalShortName = code.toUpperCase();\r\n    setLock(true);\r\n    if (edit) {\r\n      const id = branch?.id;\r\n      dispatch(\r\n        updateBranch(id, history, {\r\n          ...values,\r\n          name: capitalName,\r\n          code: capitalShortName,\r\n        })\r\n      );\r\n    } else {\r\n      dispatch(\r\n        createBranch(\r\n          { ...values, name: capitalName, code: capitalShortName },\r\n          history,\r\n          currentPage\r\n        )\r\n      );\r\n    }\r\n    setLock(false);\r\n  };\r\n\r\n  // function which checks whether the branch is added already or not\r\n  const handleChangeName = async (e, code) => {\r\n    if (edit && e.target.value !== branch?.name) {\r\n      if (e.target.value.trim() && e.target.value !== \"\") {\r\n        const result = await checkRedundantDataBranchName(e, code);\r\n        result\r\n          ? errorFunction(\"Branch with this name is already added \") ||\r\n            setLock(true)\r\n          : setLock(false);\r\n      }\r\n    }\r\n    if (!edit && e.target.value.trim() && e.target.value !== \"\") {\r\n      const result = await checkRedundantDataBranchName(e, code);\r\n      result\r\n        ? errorFunction(\"Branch name with this  is already added. \") ||\r\n          setLock(true)\r\n        : setLock(false);\r\n    }\r\n  };\r\n  const handleChangeCode = async (e, name) => {\r\n    if (edit && e.target.value !== branch?.code) {\r\n      if (e.target.value.trim() && e.target.value !== \"\") {\r\n        const result = await checkRedundantDataBranchCode(e, name);\r\n        result\r\n          ? errorFunction(\"Branch with this name is already added \") ||\r\n            setLock(true)\r\n          : setLock(false);\r\n      }\r\n    }\r\n    if (!edit && e.target.value.trim() && e.target.value !== \"\") {\r\n      const result = await checkRedundantDataBranchCode(e, name);\r\n      result\r\n        ? errorFunction(\"Branch name with this  is already added. \") ||\r\n          setLock(true)\r\n        : setLock(false);\r\n    }\r\n  };\r\n  return (\r\n    <>\r\n      <div className=\"row  mt-2\">\r\n        <div className=\"col-12 \">\r\n          <div className=\"registration-process \">\r\n            <Formik\r\n              enableReinitialize={true}\r\n              initialValues={initialState}\r\n              validationSchema={validationSchema}\r\n              onSubmit={onSubmit}\r\n            >\r\n              {(formik) => {\r\n                return (\r\n                  <Form autoComplete=\"off\">\r\n                    <div className=\"form-group row my-2 justify-content-center\">\r\n                      <div className=\"col-6\">\r\n                        <label htmlFor=\"name\" className=\"fw-bold float-start\">\r\n                          Name\r\n                          <strong className=\"text-danger \">*</strong>\r\n                        </label>\r\n                        <Field\r\n                          type=\"text\"\r\n                          name=\"name\"\r\n                          className=\"form-control \"\r\n                          placeholder=\"Name\"\r\n                          onChange={(e) => {\r\n                            formik.setFieldValue(\"name\", e.target.value);\r\n                            handleChangeName(e, formik.values.code);\r\n                          }}\r\n                          autoFocus\r\n                        />\r\n                        <ErrorMessage name=\"name\" component={TextError} />\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"form-group row my-2 justify-content-center\">\r\n                      <div className=\"col-6\">\r\n                        <label htmlFor=\"code\" className=\"fw-bold float-start\">\r\n                          Code\r\n                          <strong className=\"text-danger \">*</strong>\r\n                        </label>\r\n                        <Field\r\n                          type=\"text\"\r\n                          name=\"code\"\r\n                          className=\"form-control \"\r\n                          placeholder=\"Code\"\r\n                          onChange={(e) => {\r\n                            formik.setFieldValue(\"code\", e.target.value);\r\n                            handleChangeCode(e, formik.values.name);\r\n                          }}\r\n                        />\r\n                        <ErrorMessage name=\"code\" component={TextError} />\r\n                      </div>\r\n                    </div>\r\n\r\n                    <div className=\"form-group row my-2 justify-content-center\">\r\n                      {edit && (\r\n                        <div className=\"col-3\">\r\n                          <label htmlFor=\"remarks\" className=\"fw-bold\">\r\n                            Remarks\r\n                            <span className=\"text-danger\">*</span>\r\n                          </label>\r\n                          <textarea\r\n                            type=\"text\"\r\n                            name=\"remarks\"\r\n                            onChange={(e) => {\r\n                              formik.setFieldValue(\r\n                                \"remarks\",\r\n                                e.target.value.trim()\r\n                              );\r\n                            }}\r\n                            className=\"form-control\"\r\n                            placeholder=\"Enter remarks\"\r\n                          />\r\n                          <ErrorMessage name=\"remarks\" component={TextError} />\r\n                        </div>\r\n                      )}\r\n                    </div>\r\n                    <div className=\"form-group row my-2 justify-content-center\">\r\n                      <div className=\"col-12 text-center\">\r\n                        <Field\r\n                          type=\"checkbox\"\r\n                          name=\"is_active\"\r\n                          id=\"is_active\"\r\n                          className=\"filled-in chk-col-blue\"\r\n                        />\r\n                        <label htmlFor=\"is_active\" className=\"fw-bold mx-2\">\r\n                          Active\r\n                        </label>\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"form-group text-center\">\r\n                      {!edit ? (\r\n                        <Button\r\n                          type={\"btn\"}\r\n                          className={\"btn btn-primary\"}\r\n                          loading={loading}\r\n                          disabled={lock || !formik.dirty}\r\n                          title={\"Create\"}\r\n                          content={\"Add\"}\r\n                        />\r\n                      ) : (\r\n                        <Button\r\n                          type={\"btn\"}\r\n                          className={\"btn btn-primary \"}\r\n                          loading={loading}\r\n                          disabled={lock}\r\n                          title={\"Update\"}\r\n                          content={\"Update\"}\r\n                        />\r\n                      )}\r\n                    </div>\r\n                  </Form>\r\n                );\r\n              }}\r\n            </Formik>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\nexport default CreateBranch;\r\n","import axiosInstance from \"../../utils/axios\";\r\n\r\n//obtaining the paginated data\r\nexport const getBranch = (postsPerPage) =>\r\n  axiosInstance.get(\r\n    `api/v1/core-app/branch?offset=0&limit=${postsPerPage}&ordering=-id`\r\n  );\r\n\r\n//obtaining all data\r\nexport const getAllBranch = () =>\r\n  axiosInstance.get(`api/v1/core-app/branch?ordering=-id`);\r\n\r\n//obtaining the previous page data from paginated data\r\nexport const getPrevious = (previous) => axiosInstance.get(previous);\r\n\r\n//obtaining the next page data from paginated data\r\nexport const getNext = (next) => axiosInstance.get(next);\r\n\r\n//obtaining the particular page data from paginated data\r\nexport const getPageBranch = (number, postsPerPage) =>\r\n  axiosInstance.get(\r\n    `api/v1/core-app/branch?offset=${\r\n      (number - 1) * postsPerPage\r\n    }&limit=${postsPerPage}&ordering=-id`\r\n  );\r\n\r\n//creating function\r\nexport const createBranch = (body) =>\r\n  axiosInstance.post(`api/v1/core-app/branch`, body);\r\n\r\n//deleting function\r\nexport const deleteBranch = (id) =>\r\n  axiosInstance.delete(`api/v1/core-app/branch/${id}`);\r\n\r\n//update function\r\nexport const updateBranch = (id, body) =>\r\n  axiosInstance.patch(`api/v1/core-app/branch/${id}`, body);\r\n\r\n//searching function\r\nexport const handleSearch = (search, postsPerPage) =>\r\n  axiosInstance.get(\r\n    `api/v1/core-app/branch?offset=0&limit=${postsPerPage}&search=${search}`\r\n  );\r\nexport const checkRedundantDataName = (e, cancelToken, short_name) =>\r\n  axiosInstance.get(\r\n    `api/v1/core-app/branch?short_name=${short_name}&name=${e.target.value.trim()}`,\r\n    {\r\n      cancelToken: cancelToken.token,\r\n    }\r\n  );\r\nexport const checkRedundantDataCode = (e, cancelToken, name) =>\r\n  axiosInstance.get(\r\n    `api/v1/core-app/branch?name=${name}&short_name=${e.target.value.trim()}`,\r\n    {\r\n      cancelToken: cancelToken.token,\r\n    }\r\n  );\r\n","import { branchConstants } from \"./constants\";\r\n// actions\r\nexport const loadingAction = () => ({\r\n  type: branchConstants.LOADING_BRANCH,\r\n});\r\nexport const loadingUpdatedAction = () => ({\r\n  type: branchConstants.LOADING_UPDATED,\r\n});\r\nexport const getBranchSuccessAction = (data) => ({\r\n  type: branchConstants.GET_BRANCH_SUCCESS,\r\n  payload: data,\r\n});\r\nexport const getBranchFailAction = (error) => ({\r\n  type: branchConstants.GET_BRANCH_FAIL,\r\n  payload: error,\r\n});\r\n\r\nexport const createBranchSuccessAction = (data) => ({\r\n  type: branchConstants.CREATE_BRANCH_SUCCESS,\r\n  payload: data,\r\n});\r\n\r\nexport const createBranchFailAction = (error) => ({\r\n  type: branchConstants.CREATE_BRANCH_FAIL,\r\n  payload: error,\r\n});\r\n\r\nexport const deleteBranchSuccessAction = (data) => ({\r\n  type: branchConstants.BRANCH_DELETED_SUCCESS,\r\n  payload: data,\r\n});\r\n\r\nexport const deleteBranchFailAction = (error) => ({\r\n  type: branchConstants.BRANCH_DELETED_FAIL,\r\n  payload: error,\r\n});\r\n\r\nexport const updatedBranchSuccessAction = (data) => ({\r\n  type: branchConstants.BRANCH_UPDATE_SUCCESS,\r\n  payload: data,\r\n});\r\n\r\nexport const updatedBranchFailAction = (error) => ({\r\n  type: branchConstants.BRANCH_UPDATE_FAIL,\r\n  payload: error,\r\n});\r\n","import * as API from \"./api\";\r\nimport * as actions from \"./actions\";\r\nimport { errorFunction, successFunction } from \"../../Component/Alert\";\r\nimport { defaultLimit } from \"../../utils/defaultLimit\";\r\n//get  Bank\r\nexport const getBranch = (postsPerPage) => async (dispatch) => {\r\n  try {\r\n    dispatch(actions.loadingAction());\r\n    const { data } = await API.getBranch(postsPerPage);\r\n    dispatch(actions.getBranchSuccessAction(data));\r\n  } catch (error) {\r\n    dispatch(actions.getBranchFailAction(error));\r\n    errorFunction(error);\r\n  }\r\n};\r\n// get all bank\r\nexport const getAllBranch = () => async (dispatch) => {\r\n  try {\r\n    dispatch(actions.loadingAction());\r\n    const { data } = await API.getAllBranch();\r\n    dispatch(actions.getBranchSuccessAction(data));\r\n  } catch (error) {\r\n    dispatch(actions.getBranchFailAction(error));\r\n    errorFunction(error);\r\n  }\r\n};\r\n//get previous  page\r\nexport const getPrevious = (previous) => async (dispatch) => {\r\n  try {\r\n    dispatch(actions.loadingAction());\r\n    const { data } = await API.getPrevious(previous);\r\n    dispatch(actions.getBranchSuccessAction(data));\r\n  } catch (error) {\r\n    dispatch(actions.getBranchFailAction(error));\r\n    errorFunction(error);\r\n  }\r\n};\r\n//get next  page\r\nexport const getNext = (next) => async (dispatch) => {\r\n  try {\r\n    dispatch(actions.loadingAction());\r\n    const { data } = await API.getNext(next);\r\n    dispatch(actions.getBranchSuccessAction(data));\r\n  } catch (error) {\r\n    dispatch(actions.getBranchFailAction(error));\r\n    errorFunction(error);\r\n  }\r\n};\r\n//get particular page\r\nexport const getPageBranch =\r\n  ({ number, postsPerPage }) =>\r\n  async (dispatch) => {\r\n    try {\r\n      dispatch(actions.loadingAction());\r\n      const { data } = await API.getPageBranch(number, postsPerPage);\r\n      dispatch(actions.getBranchSuccessAction(data));\r\n    } catch (error) {\r\n      dispatch(actions.getBranchFailAction(error));\r\n      errorFunction(error);\r\n    }\r\n  };\r\nexport const createBranch =\r\n  ({ name, code, active }, history) =>\r\n  async (dispatch) => {\r\n    try {\r\n      const body = JSON.stringify({ name, code, active });\r\n      dispatch(actions.loadingAction());\r\n      const { data } = await API.createBranch(body);\r\n      dispatch(actions.createBranchSuccessAction(data));\r\n      successFunction(\"Branch Added Successfully.\");\r\n      history.push(\"/branch\");\r\n    } catch (error) {\r\n      dispatch(actions.createBranchFailAction(error));\r\n      errorFunction(\"Failed to create branch.\");\r\n    }\r\n  };\r\n// Delete  bank\r\nexport const deleteBranch = (id) => async (dispatch) => {\r\n  try {\r\n    dispatch(actions.loadingAction());\r\n    const { data } = await API.deleteBranch(id);\r\n    dispatch(actions.deleteBranchSuccessAction(data));\r\n    successFunction(\"Branch Deleted Successfully.\");\r\n  } catch (error) {\r\n    dispatch(actions.deleteBranchFailAction(error));\r\n    errorFunction(error);\r\n  }\r\n};\r\n\r\n//update\r\nexport const updateBranch = (id,history, values) => async (dispatch) => {\r\n  try {\r\n    dispatch(actions.loadingUpdatedAction());\r\n    const { name, code, remarks, active } = values;\r\n    const body = JSON.stringify({ name, code, remarks, active });\r\n    const { data } = await API.updateBranch(id, body);\r\n    dispatch(actions.updatedBranchSuccessAction(data));\r\n    successFunction(\"Branch Updated Successfully \");\r\n    history.push(\"/branch\");\r\n  } catch (error) {\r\n    dispatch(actions.updatedBranchFailAction(error));\r\n    errorFunction(\"Failed to Update Branch\");\r\n  }\r\n};\r\n//handle Search\r\nexport const handleSearch = (search, postsPerPage) => async (dispatch) => {\r\n  try {\r\n    dispatch(actions.loadingAction());\r\n    const { data } = await API.handleSearch(search, postsPerPage);\r\n    dispatch(actions.getBranchSuccessAction(data));\r\n  } catch (error) {\r\n    dispatch(actions.getBranchFailAction(error));\r\n    errorFunction(error);\r\n  }\r\n};\r\n"],"names":["type","className","disabled","title","loading","content","color","onClick","src","spinner","alt","height","props","children","cancelToken","checkRedundantDataBranchName","e","short_name","cancel","axios","checkRedundantDataName","data","length","checkRedundantDataBranchCode","name","checkRedundantDataCode","currentPage","history","useHistory","branch","useSelector","state","edit","dispatch","useDispatch","useState","lock","setLock","initialState","code","is_active","remarks","validationSchema","Yup","shape","required","min","max","handleChangeName","target","value","trim","errorFunction","handleChangeCode","enableReinitialize","initialValues","onSubmit","values","capitalName","charAt","toUpperCase","slice","capitalShortName","id","updateBranch","createBranch","formik","autoComplete","htmlFor","placeholder","onChange","setFieldValue","autoFocus","component","TextError","Button","dirty","getBranch","postsPerPage","axiosInstance","getPrevious","previous","getNext","next","getPageBranch","number","body","handleSearch","search","token","loadingAction","branchConstants","getBranchSuccessAction","payload","getBranchFailAction","error","createBranchSuccessAction","updatedBranchSuccessAction","actions","API","active","JSON","stringify","successFunction","push"],"sourceRoot":""}