{"version":3,"file":"static/js/725.296ebce7.chunk.js","mappings":"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","sources":["Component/Button/Button.js","Component/Spinner/Spinner.js","Component/TextError/TextError.js","Component/Tooltip/Tooltip.js","Pages/Print/CreatePrint.js","Redux/Print/api.js","Redux/Print/actions.js","Redux/Print/thunk.js"],"sourcesContent":["import React from \"react\";\r\nimport Spinner from \"../Spinner/Spinner\";\r\nimport Tooltip from \"../Tooltip/Tooltip\";\r\n\r\nconst Button = ({ type, className, disabled, title, loading, content, color, onClick }) => {\r\n\r\n    return (\r\n        <Tooltip content={content}>\r\n            <button onClick={onClick} type={type} className={className} disabled={disabled}>\r\n                {loading ? <Spinner color={color} /> : title}\r\n\r\n            </button>\r\n        </Tooltip>\r\n    )\r\n}\r\nexport default Button","import React from \"react\";\r\nimport spinner from \"../../assets/spinner.gif\";\r\nconst Spinner = ({ color }) => {\r\n  return <img src={spinner} alt=\"spinner\" color={color} height=\"30px\" className=\"ml-4\" />;\r\n};\r\n\r\nexport default Spinner;\r\n","import React from \"react\";\r\nimport \"./TextError.css\";\r\nconst TextError = (props) => {\r\n  return <div className=\"error\">{props.children}</div>;\r\n};\r\n\r\nexport default TextError;\r\n","import React from \"react\";\r\nimport Tippy from \"@tippyjs/react\";\r\nconst Tooltip = ({ content, children }) => {\r\n  return <Tippy content={content}>{children}</Tippy>;\r\n};\r\n\r\nexport default Tooltip;","import React, { useState } from \"react\";\r\nimport { Formik, Form, Field, ErrorMessage } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport TextError from \"../../Component/TextError/TextError\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { createPrint, updatePrint } from \"../../Redux/Print/thunk\";\r\nimport Button from \"../../Component/Button/Button\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst CreatePrint = ({ currentPage }) => {\r\n  // props\r\n  const history = useHistory();\r\n  const print = useSelector((state) => state.print.print);\r\n  const loading = useSelector((state) => state.print.loading);\r\n  const edit = useSelector((state) => state.print.edit);\r\n  const dispatch = useDispatch();\r\n  //state for disabling the submit button\r\n  const [lock, setLock] = useState(false);\r\n  //initial state of the form\r\n  const initialState = {\r\n    first_name: edit ? print?.first_name : \"\",\r\n    middle_name: edit ? print?.middle_name : \"\",\r\n    last_name: edit ? print?.last_name : \"\",\r\n    remarks: \"\",\r\n  };\r\n\r\n  //validation rules of the form\r\n  const validationSchema = Yup.object().shape({\r\n    first_name: Yup.string()\r\n      .required(\"Name is required.\")\r\n      .min(1, \"Name must be at least 1 characters.\")\r\n      .max(50, \"Name must be at least 50 characters.\"),\r\n    middle_name: Yup.string().max(50, \"Name must be at least 50 characters.\"),\r\n    last_name: Yup.string()\r\n      .required(\"Name is required.\")\r\n      .min(1, \"Name must be at least 1 characters.\")\r\n      .max(50, \"Name must be at least 50 characters.\"),\r\n    remarks:\r\n      edit &&\r\n      Yup.string()\r\n        .required(\"Remarks is required.\")\r\n        .min(1, \"Remarks Name must be at least 1 characters.\"),\r\n  });\r\n  const onSubmit = (values) => {\r\n    const { first_name, middle_name, last_name } = values;\r\n    const capitalFirstName =\r\n      first_name?.charAt(0).toUpperCase() + first_name?.slice(1);\r\n    const capitalMiddleName =\r\n      middle_name?.charAt(0).toUpperCase() + middle_name?.slice(1);\r\n    const capitalLastName =\r\n      last_name?.charAt(0).toUpperCase() + last_name?.slice(1);\r\n    setLock(true);\r\n    if (edit) {\r\n      const id = print?.id;\r\n      dispatch(\r\n        updatePrint(id, history, {\r\n          ...values,\r\n          first_name: capitalFirstName,\r\n          middle_name: capitalMiddleName,\r\n          last_name: capitalLastName,\r\n        })\r\n      );\r\n    } else {\r\n      dispatch(\r\n        createPrint(\r\n          {\r\n            ...values,\r\n            first_name: capitalFirstName,\r\n            middle_name: capitalMiddleName,\r\n            last_name: capitalLastName,\r\n          },\r\n          history,\r\n          currentPage\r\n        )\r\n      );\r\n    }\r\n    setLock(false);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"row  mt-2\">\r\n        <div className=\"col-12 \">\r\n          <div className=\"registration-process \">\r\n            <Formik\r\n              enableReinitialize={true}\r\n              initialValues={initialState}\r\n              validationSchema={validationSchema}\r\n              onSubmit={onSubmit}\r\n            >\r\n              {(formik) => {\r\n                return (\r\n                  <Form autoComplete=\"off\">\r\n                    <div className=\"form-group row my-2 justify-content-center\">\r\n                      <div className=\"col-6\">\r\n                        <label\r\n                          htmlFor=\"first_name\"\r\n                          className=\"fw-bold float-start\"\r\n                        >\r\n                          First Name\r\n                          <strong className=\"text-danger \">*</strong>\r\n                        </label>\r\n                        <Field\r\n                          type=\"text\"\r\n                          name=\"first_name\"\r\n                          className=\"form-control \"\r\n                          placeholder=\"First Name\"\r\n                          autoFocus\r\n                        />\r\n                        <ErrorMessage name=\"first_name\" component={TextError} />\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"form-group row my-2 justify-content-center\">\r\n                      <div className=\"col-6\">\r\n                        <label\r\n                          htmlFor=\"middle_name\"\r\n                          className=\"fw-bold float-start\"\r\n                        >\r\n                          Middle Name\r\n                        </label>\r\n                        <Field\r\n                          type=\"text\"\r\n                          name=\"middle_name\"\r\n                          className=\"form-control \"\r\n                          placeholder=\"First Name\"\r\n                        />\r\n                        <ErrorMessage\r\n                          name=\"middle_name\"\r\n                          component={TextError}\r\n                        />\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"form-group row my-2 justify-content-center\">\r\n                      <div className=\"col-6\">\r\n                        <label\r\n                          htmlFor=\"last_name\"\r\n                          className=\"fw-bold float-start\"\r\n                        >\r\n                          Last Name\r\n                          <strong className=\"text-danger \">*</strong>\r\n                        </label>\r\n                        <Field\r\n                          type=\"text\"\r\n                          name=\"last_name\"\r\n                          className=\"form-control \"\r\n                          placeholder=\"Last Name\"\r\n                        />\r\n                        <ErrorMessage name=\"last_name\" component={TextError} />\r\n                      </div>\r\n                    </div>\r\n\r\n                    <div className=\"form-group row my-2 justify-content-center\">\r\n                      {edit && (\r\n                        <div className=\"col-3\">\r\n                          <label htmlFor=\"remarks\" className=\"fw-bold\">\r\n                            Remarks\r\n                            <span className=\"text-danger\">*</span>\r\n                          </label>\r\n                          <textarea\r\n                            type=\"text\"\r\n                            name=\"remarks\"\r\n                            onChange={(e) => {\r\n                              formik.setFieldValue(\r\n                                \"remarks\",\r\n                                e.target.value.trim()\r\n                              );\r\n                            }}\r\n                            className=\"form-control\"\r\n                            placeholder=\"Enter remarks\"\r\n                          />\r\n                          <ErrorMessage name=\"remarks\" component={TextError} />\r\n                        </div>\r\n                      )}\r\n                    </div>\r\n\r\n                    <div className=\"form-group text-center\">\r\n                      {!edit ? (\r\n                        <Button\r\n                          type={\"btn\"}\r\n                          className={\"btn btn-primary\"}\r\n                          loading={loading}\r\n                          disabled={lock || !formik.dirty}\r\n                          title={\"Create\"}\r\n                          content={\"Add\"}\r\n                        />\r\n                      ) : (\r\n                        <Button\r\n                          type={\"btn\"}\r\n                          className={\"btn btn-primary \"}\r\n                          loading={loading}\r\n                          disabled={lock}\r\n                          title={\"Update\"}\r\n                          content={\"Update\"}\r\n                        />\r\n                      )}\r\n                    </div>\r\n                  </Form>\r\n                );\r\n              }}\r\n            </Formik>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\nexport default CreatePrint;\r\n","import axiosInstance from \"../../utils/axios\";\r\n\r\n//obtaining the paginated data\r\nexport const getPrint = (postsPerPage) =>\r\n  axiosInstance.get(\r\n    `api/v1/core-app/print?offset=0&limit=${postsPerPage}&ordering=-id`\r\n  );\r\n\r\n//obtaining all data\r\nexport const getAllPrint = () =>\r\n  axiosInstance.get(`api/v1/core-app/print?ordering=-id`);\r\n\r\n//obtaining the previous page data from paginated data\r\nexport const getPrevious = (previous) => axiosInstance.get(previous);\r\n\r\n//obtaining the next page data from paginated data\r\nexport const getNext = (next) => axiosInstance.get(next);\r\n\r\n//obtaining the particular page data from paginated data\r\nexport const getParticularPage = (number, postsPerPage) =>\r\n  axiosInstance.get(\r\n    `api/v1/core-app/print?offset=${\r\n      (number - 1) * postsPerPage\r\n    }&limit=${postsPerPage}&ordering=-id`\r\n  );\r\n\r\n//creating function\r\nexport const createPrint = (body) =>\r\n  axiosInstance.post(`api/v1/core-app/print`, body);\r\n\r\n//deleting function\r\nexport const deletePrint = (id) =>\r\n  axiosInstance.delete(`api/v1/core-app/print/${id}`);\r\n\r\n//update function\r\nexport const updatePrint = (id, body) =>\r\n  axiosInstance.patch(`api/v1/core-app/print/${id}`, body);\r\n\r\n//searching function\r\nexport const handleSearch = (search, postsPerPage) =>\r\n  axiosInstance.get(\r\n    `api/v1/core-app/print?offset=0&limit=${postsPerPage}&search=${search}`\r\n  );\r\n","import { printConstants } from \"./constants\";\r\n// actions\r\nexport const loadingAction = () => ({\r\n  type: printConstants.LOADING_PRINT,\r\n});\r\nexport const loadingUpdatedAction = () => ({\r\n  type: printConstants.LOADING_UPDATED,\r\n});\r\nexport const getPrintSuccessAction = (data) => ({\r\n  type: printConstants.GET_PRINT_SUCCESS,\r\n  payload: data,\r\n});\r\nexport const getPrintFailAction = (error) => ({\r\n  type: printConstants.GET_PRINT_FAIL,\r\n  payload: error,\r\n});\r\n\r\nexport const createPrintSuccessAction = (data) => ({\r\n  type: printConstants.CREATE_PRINT_SUCCESS,\r\n  payload: data,\r\n});\r\n\r\nexport const createPrintFailAction = (error) => ({\r\n  type: printConstants.CREATE_PRINT_FAIL,\r\n  payload: error,\r\n});\r\n\r\nexport const deletePrintSuccessAction = (data) => ({\r\n  type: printConstants.PRINT_DELETED_SUCCESS,\r\n  payload: data,\r\n});\r\n\r\nexport const deletePrintFailAction = (error) => ({\r\n  type: printConstants.PRINT_DELETED_FAIL,\r\n  payload: error,\r\n});\r\n\r\nexport const updatedPrintSuccessAction = (data) => ({\r\n  type: printConstants.PRINT_UPDATE_SUCCESS,\r\n  payload: data,\r\n});\r\n\r\nexport const updatedPrintFailAction = (error) => ({\r\n  type: printConstants.PRINT_UPDATE_FAIL,\r\n  payload: error,\r\n});\r\n","import * as API from \"./api\";\r\nimport * as actions from \"./actions\";\r\nimport { errorFunction, successFunction } from \"../../Component/Alert\";\r\nimport { defaultLimit } from \"../../utils/defaultLimit\";\r\n//get  Bank\r\nexport const getPrint = (postsPerPage) => async (dispatch) => {\r\n  try {\r\n    dispatch(actions.loadingAction());\r\n    const { data } = await API.getPrint(postsPerPage);\r\n    dispatch(actions.getPrintSuccessAction(data));\r\n  } catch (error) {\r\n    dispatch(actions.getPrintFailAction(error));\r\n    errorFunction(error);\r\n  }\r\n};\r\n// get all bank\r\nexport const getAllPrint = () => async (dispatch) => {\r\n  try {\r\n    dispatch(actions.loadingAction());\r\n    const { data } = await API.getAllPrint();\r\n    dispatch(actions.getPrintSuccessAction(data));\r\n  } catch (error) {\r\n    dispatch(actions.getPrintFailAction(error));\r\n    errorFunction(error);\r\n  }\r\n};\r\n//get previous  page\r\nexport const getPrevious = (previous) => async (dispatch) => {\r\n  try {\r\n    dispatch(actions.loadingAction());\r\n    const { data } = await API.getPrevious(previous);\r\n    dispatch(actions.getPrintSuccessAction(data));\r\n  } catch (error) {\r\n    dispatch(actions.getPrintFailAction(error));\r\n    errorFunction(error);\r\n  }\r\n};\r\n//get next  page\r\nexport const getNext = (next) => async (dispatch) => {\r\n  try {\r\n    dispatch(actions.loadingAction());\r\n    const { data } = await API.getNext(next);\r\n    dispatch(actions.getPrintSuccessAction(data));\r\n  } catch (error) {\r\n    dispatch(actions.getPrintFailAction(error));\r\n    errorFunction(error);\r\n  }\r\n};\r\n//get particular page\r\nexport const getParticularPage =\r\n  ({ number, postsPerPage }) =>\r\n  async (dispatch) => {\r\n    try {\r\n      dispatch(actions.loadingAction());\r\n      const { data } = await API.getParticularPage(number, postsPerPage);\r\n      dispatch(actions.getPrintSuccessAction(data));\r\n    } catch (error) {\r\n      dispatch(actions.getPrintFailAction(error));\r\n      errorFunction(error);\r\n    }\r\n  };\r\nexport const createPrint =\r\n  ({ first_name, middle_name, last_name }, history) =>\r\n  async (dispatch) => {\r\n    try {\r\n      const body = JSON.stringify({ first_name, middle_name, last_name });\r\n      dispatch(actions.loadingAction());\r\n      const { data } = await API.createPrint(body);\r\n      dispatch(actions.createPrintSuccessAction(data));\r\n      successFunction(\"Record Added Successfully.\");\r\n      history.push(\"/print\");\r\n    } catch (error) {\r\n      dispatch(actions.createPrintFailAction(error));\r\n      errorFunction(\"Failed to create record.\");\r\n    }\r\n  };\r\n\r\n//update\r\nexport const updatePrint = (id, history, values) => async (dispatch) => {\r\n  try {\r\n    dispatch(actions.loadingUpdatedAction());\r\n    const { first_name, middle_name, last_name } = values;\r\n    const body = JSON.stringify({ first_name, middle_name, last_name });\r\n    const { data } = await API.updatePrint(id, body);\r\n    dispatch(actions.updatedPrintSuccessAction(data));\r\n    successFunction(\"Record Updated Successfully \");\r\n    history.push(\"/print\");\r\n  } catch (error) {\r\n    dispatch(actions.updatedPrintFailAction(error));\r\n    errorFunction(\"Failed to Update Record\");\r\n  }\r\n};\r\n//handle Search\r\nexport const handleSearch = (search, postsPerPage) => async (dispatch) => {\r\n  try {\r\n    dispatch(actions.loadingAction());\r\n    const { data } = await API.handleSearch(search, postsPerPage);\r\n    dispatch(actions.getPrintSuccessAction(data));\r\n  } catch (error) {\r\n    dispatch(actions.getPrintFailAction(error));\r\n    errorFunction(error);\r\n  }\r\n};\r\n"],"names":["type","className","disabled","title","loading","content","color","onClick","src","spinner","alt","height","props","children","currentPage","history","useHistory","print","useSelector","state","edit","dispatch","useDispatch","useState","lock","setLock","initialState","first_name","middle_name","last_name","remarks","validationSchema","Yup","shape","required","min","max","enableReinitialize","initialValues","onSubmit","values","capitalFirstName","charAt","toUpperCase","slice","capitalMiddleName","capitalLastName","id","updatePrint","createPrint","formik","autoComplete","htmlFor","name","placeholder","autoFocus","component","TextError","onChange","e","setFieldValue","target","value","trim","dirty","getPrint","postsPerPage","axiosInstance","getPrevious","previous","getNext","next","getParticularPage","number","body","handleSearch","search","loadingAction","printConstants","getPrintSuccessAction","data","payload","getPrintFailAction","error","createPrintSuccessAction","updatedPrintSuccessAction","actions","API","errorFunction","JSON","stringify","successFunction","push"],"sourceRoot":""}